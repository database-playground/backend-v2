// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/database-playground/backend-v2/ent/predicate"
	"github.com/database-playground/backend-v2/ent/question"
	"github.com/database-playground/backend-v2/ent/submission"
	"github.com/database-playground/backend-v2/ent/user"
	"github.com/database-playground/backend-v2/models"
)

// SubmissionUpdate is the builder for updating Submission entities.
type SubmissionUpdate struct {
	config
	hooks    []Hook
	mutation *SubmissionMutation
}

// Where appends a list predicates to the SubmissionUpdate builder.
func (_u *SubmissionUpdate) Where(ps ...predicate.Submission) *SubmissionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSubmittedCode sets the "submitted_code" field.
func (_u *SubmissionUpdate) SetSubmittedCode(v string) *SubmissionUpdate {
	_u.mutation.SetSubmittedCode(v)
	return _u
}

// SetNillableSubmittedCode sets the "submitted_code" field if the given value is not nil.
func (_u *SubmissionUpdate) SetNillableSubmittedCode(v *string) *SubmissionUpdate {
	if v != nil {
		_u.SetSubmittedCode(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *SubmissionUpdate) SetStatus(v submission.Status) *SubmissionUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SubmissionUpdate) SetNillableStatus(v *submission.Status) *SubmissionUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetQueryResult sets the "query_result" field.
func (_u *SubmissionUpdate) SetQueryResult(v *models.UserSQLExecutionResult) *SubmissionUpdate {
	_u.mutation.SetQueryResult(v)
	return _u
}

// ClearQueryResult clears the value of the "query_result" field.
func (_u *SubmissionUpdate) ClearQueryResult() *SubmissionUpdate {
	_u.mutation.ClearQueryResult()
	return _u
}

// SetError sets the "error" field.
func (_u *SubmissionUpdate) SetError(v string) *SubmissionUpdate {
	_u.mutation.SetError(v)
	return _u
}

// SetNillableError sets the "error" field if the given value is not nil.
func (_u *SubmissionUpdate) SetNillableError(v *string) *SubmissionUpdate {
	if v != nil {
		_u.SetError(*v)
	}
	return _u
}

// ClearError clears the value of the "error" field.
func (_u *SubmissionUpdate) ClearError() *SubmissionUpdate {
	_u.mutation.ClearError()
	return _u
}

// SetSubmittedAt sets the "submitted_at" field.
func (_u *SubmissionUpdate) SetSubmittedAt(v time.Time) *SubmissionUpdate {
	_u.mutation.SetSubmittedAt(v)
	return _u
}

// SetNillableSubmittedAt sets the "submitted_at" field if the given value is not nil.
func (_u *SubmissionUpdate) SetNillableSubmittedAt(v *time.Time) *SubmissionUpdate {
	if v != nil {
		_u.SetSubmittedAt(*v)
	}
	return _u
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (_u *SubmissionUpdate) SetQuestionID(id int) *SubmissionUpdate {
	_u.mutation.SetQuestionID(id)
	return _u
}

// SetQuestion sets the "question" edge to the Question entity.
func (_u *SubmissionUpdate) SetQuestion(v *Question) *SubmissionUpdate {
	return _u.SetQuestionID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *SubmissionUpdate) SetUserID(id int) *SubmissionUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *SubmissionUpdate) SetUser(v *User) *SubmissionUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the SubmissionMutation object of the builder.
func (_u *SubmissionUpdate) Mutation() *SubmissionMutation {
	return _u.mutation
}

// ClearQuestion clears the "question" edge to the Question entity.
func (_u *SubmissionUpdate) ClearQuestion() *SubmissionUpdate {
	_u.mutation.ClearQuestion()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *SubmissionUpdate) ClearUser() *SubmissionUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SubmissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SubmissionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubmissionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubmissionUpdate) check() error {
	if v, ok := _u.mutation.SubmittedCode(); ok {
		if err := submission.SubmittedCodeValidator(v); err != nil {
			return &ValidationError{Name: "submitted_code", err: fmt.Errorf(`ent: validator failed for field "Submission.submitted_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := submission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Submission.status": %w`, err)}
		}
	}
	if _u.mutation.QuestionCleared() && len(_u.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Submission.question"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Submission.user"`)
	}
	return nil
}

func (_u *SubmissionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(submission.Table, submission.Columns, sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SubmittedCode(); ok {
		_spec.SetField(submission.FieldSubmittedCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(submission.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.QueryResult(); ok {
		_spec.SetField(submission.FieldQueryResult, field.TypeJSON, value)
	}
	if _u.mutation.QueryResultCleared() {
		_spec.ClearField(submission.FieldQueryResult, field.TypeJSON)
	}
	if value, ok := _u.mutation.Error(); ok {
		_spec.SetField(submission.FieldError, field.TypeString, value)
	}
	if _u.mutation.ErrorCleared() {
		_spec.ClearField(submission.FieldError, field.TypeString)
	}
	if value, ok := _u.mutation.SubmittedAt(); ok {
		_spec.SetField(submission.FieldSubmittedAt, field.TypeTime, value)
	}
	if _u.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.QuestionTable,
			Columns: []string{submission.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.QuestionTable,
			Columns: []string{submission.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.UserTable,
			Columns: []string{submission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.UserTable,
			Columns: []string{submission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SubmissionUpdateOne is the builder for updating a single Submission entity.
type SubmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubmissionMutation
}

// SetSubmittedCode sets the "submitted_code" field.
func (_u *SubmissionUpdateOne) SetSubmittedCode(v string) *SubmissionUpdateOne {
	_u.mutation.SetSubmittedCode(v)
	return _u
}

// SetNillableSubmittedCode sets the "submitted_code" field if the given value is not nil.
func (_u *SubmissionUpdateOne) SetNillableSubmittedCode(v *string) *SubmissionUpdateOne {
	if v != nil {
		_u.SetSubmittedCode(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *SubmissionUpdateOne) SetStatus(v submission.Status) *SubmissionUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SubmissionUpdateOne) SetNillableStatus(v *submission.Status) *SubmissionUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetQueryResult sets the "query_result" field.
func (_u *SubmissionUpdateOne) SetQueryResult(v *models.UserSQLExecutionResult) *SubmissionUpdateOne {
	_u.mutation.SetQueryResult(v)
	return _u
}

// ClearQueryResult clears the value of the "query_result" field.
func (_u *SubmissionUpdateOne) ClearQueryResult() *SubmissionUpdateOne {
	_u.mutation.ClearQueryResult()
	return _u
}

// SetError sets the "error" field.
func (_u *SubmissionUpdateOne) SetError(v string) *SubmissionUpdateOne {
	_u.mutation.SetError(v)
	return _u
}

// SetNillableError sets the "error" field if the given value is not nil.
func (_u *SubmissionUpdateOne) SetNillableError(v *string) *SubmissionUpdateOne {
	if v != nil {
		_u.SetError(*v)
	}
	return _u
}

// ClearError clears the value of the "error" field.
func (_u *SubmissionUpdateOne) ClearError() *SubmissionUpdateOne {
	_u.mutation.ClearError()
	return _u
}

// SetSubmittedAt sets the "submitted_at" field.
func (_u *SubmissionUpdateOne) SetSubmittedAt(v time.Time) *SubmissionUpdateOne {
	_u.mutation.SetSubmittedAt(v)
	return _u
}

// SetNillableSubmittedAt sets the "submitted_at" field if the given value is not nil.
func (_u *SubmissionUpdateOne) SetNillableSubmittedAt(v *time.Time) *SubmissionUpdateOne {
	if v != nil {
		_u.SetSubmittedAt(*v)
	}
	return _u
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (_u *SubmissionUpdateOne) SetQuestionID(id int) *SubmissionUpdateOne {
	_u.mutation.SetQuestionID(id)
	return _u
}

// SetQuestion sets the "question" edge to the Question entity.
func (_u *SubmissionUpdateOne) SetQuestion(v *Question) *SubmissionUpdateOne {
	return _u.SetQuestionID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *SubmissionUpdateOne) SetUserID(id int) *SubmissionUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *SubmissionUpdateOne) SetUser(v *User) *SubmissionUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the SubmissionMutation object of the builder.
func (_u *SubmissionUpdateOne) Mutation() *SubmissionMutation {
	return _u.mutation
}

// ClearQuestion clears the "question" edge to the Question entity.
func (_u *SubmissionUpdateOne) ClearQuestion() *SubmissionUpdateOne {
	_u.mutation.ClearQuestion()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *SubmissionUpdateOne) ClearUser() *SubmissionUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the SubmissionUpdate builder.
func (_u *SubmissionUpdateOne) Where(ps ...predicate.Submission) *SubmissionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SubmissionUpdateOne) Select(field string, fields ...string) *SubmissionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Submission entity.
func (_u *SubmissionUpdateOne) Save(ctx context.Context) (*Submission, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubmissionUpdateOne) SaveX(ctx context.Context) *Submission {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SubmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubmissionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubmissionUpdateOne) check() error {
	if v, ok := _u.mutation.SubmittedCode(); ok {
		if err := submission.SubmittedCodeValidator(v); err != nil {
			return &ValidationError{Name: "submitted_code", err: fmt.Errorf(`ent: validator failed for field "Submission.submitted_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := submission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Submission.status": %w`, err)}
		}
	}
	if _u.mutation.QuestionCleared() && len(_u.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Submission.question"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Submission.user"`)
	}
	return nil
}

func (_u *SubmissionUpdateOne) sqlSave(ctx context.Context) (_node *Submission, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(submission.Table, submission.Columns, sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Submission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, submission.FieldID)
		for _, f := range fields {
			if !submission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != submission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SubmittedCode(); ok {
		_spec.SetField(submission.FieldSubmittedCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(submission.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.QueryResult(); ok {
		_spec.SetField(submission.FieldQueryResult, field.TypeJSON, value)
	}
	if _u.mutation.QueryResultCleared() {
		_spec.ClearField(submission.FieldQueryResult, field.TypeJSON)
	}
	if value, ok := _u.mutation.Error(); ok {
		_spec.SetField(submission.FieldError, field.TypeString, value)
	}
	if _u.mutation.ErrorCleared() {
		_spec.ClearField(submission.FieldError, field.TypeString)
	}
	if value, ok := _u.mutation.SubmittedAt(); ok {
		_spec.SetField(submission.FieldSubmittedAt, field.TypeTime, value)
	}
	if _u.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.QuestionTable,
			Columns: []string{submission.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.QuestionTable,
			Columns: []string{submission.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.UserTable,
			Columns: []string{submission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.UserTable,
			Columns: []string{submission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Submission{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
