// Code generated by ent, DO NOT EDIT.

package question

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the question type in the database.
	Label = "question"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldDifficulty holds the string denoting the difficulty field in the database.
	FieldDifficulty = "difficulty"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldReferenceAnswer holds the string denoting the reference_answer field in the database.
	FieldReferenceAnswer = "reference_answer"
	// EdgeDatabase holds the string denoting the database edge name in mutations.
	EdgeDatabase = "database"
	// EdgeSubmissions holds the string denoting the submissions edge name in mutations.
	EdgeSubmissions = "submissions"
	// Table holds the table name of the question in the database.
	Table = "questions"
	// DatabaseTable is the table that holds the database relation/edge.
	DatabaseTable = "questions"
	// DatabaseInverseTable is the table name for the Database entity.
	// It exists in this package in order to avoid circular dependency with the "database" package.
	DatabaseInverseTable = "databases"
	// DatabaseColumn is the table column denoting the database relation/edge.
	DatabaseColumn = "database_questions"
	// SubmissionsTable is the table that holds the submissions relation/edge.
	SubmissionsTable = "submissions"
	// SubmissionsInverseTable is the table name for the Submission entity.
	// It exists in this package in order to avoid circular dependency with the "submission" package.
	SubmissionsInverseTable = "submissions"
	// SubmissionsColumn is the table column denoting the submissions relation/edge.
	SubmissionsColumn = "question_submissions"
)

// Columns holds all SQL columns for question fields.
var Columns = []string{
	FieldID,
	FieldCategory,
	FieldDifficulty,
	FieldTitle,
	FieldDescription,
	FieldReferenceAnswer,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "questions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"database_questions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	CategoryValidator func(string) error
)

// Difficulty defines the type for the "difficulty" enum field.
type Difficulty string

// DifficultyMedium is the default value of the Difficulty enum.
const DefaultDifficulty = DifficultyMedium

// Difficulty values.
const (
	DifficultyUnspecified Difficulty = "unspecified"
	DifficultyEasy        Difficulty = "easy"
	DifficultyMedium      Difficulty = "medium"
	DifficultyHard        Difficulty = "hard"
)

func (d Difficulty) String() string {
	return string(d)
}

// DifficultyValidator is a validator for the "difficulty" field enum values. It is called by the builders before save.
func DifficultyValidator(d Difficulty) error {
	switch d {
	case DifficultyUnspecified, DifficultyEasy, DifficultyMedium, DifficultyHard:
		return nil
	default:
		return fmt.Errorf("question: invalid enum value for difficulty field: %q", d)
	}
}

// OrderOption defines the ordering options for the Question queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByDifficulty orders the results by the difficulty field.
func ByDifficulty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficulty, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByReferenceAnswer orders the results by the reference_answer field.
func ByReferenceAnswer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceAnswer, opts...).ToFunc()
}

// ByDatabaseField orders the results by database field.
func ByDatabaseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDatabaseStep(), sql.OrderByField(field, opts...))
	}
}

// BySubmissionsCount orders the results by submissions count.
func BySubmissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubmissionsStep(), opts...)
	}
}

// BySubmissions orders the results by submissions terms.
func BySubmissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDatabaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DatabaseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DatabaseTable, DatabaseColumn),
	)
}
func newSubmissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubmissionsTable, SubmissionsColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Difficulty) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Difficulty) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Difficulty(str)
	if err := DifficultyValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Difficulty", str)
	}
	return nil
}
