// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/database-playground/backend-v2/ent/question"
)

// CreateDatabaseInput represents a mutation input for creating databases.
type CreateDatabaseInput struct {
	Slug           string
	Description    *string
	Schema         string
	RelationFigure string
	QuestionIDs    []int
}

// Mutate applies the CreateDatabaseInput on the DatabaseMutation builder.
func (i *CreateDatabaseInput) Mutate(m *DatabaseMutation) {
	m.SetSlug(i.Slug)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	m.SetSchema(i.Schema)
	m.SetRelationFigure(i.RelationFigure)
	if v := i.QuestionIDs; len(v) > 0 {
		m.AddQuestionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateDatabaseInput on the DatabaseCreate builder.
func (c *DatabaseCreate) SetInput(i CreateDatabaseInput) *DatabaseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDatabaseInput represents a mutation input for updating databases.
type UpdateDatabaseInput struct {
	ClearDescription  bool
	Description       *string
	Schema            *string
	RelationFigure    *string
	ClearQuestions    bool
	AddQuestionIDs    []int
	RemoveQuestionIDs []int
}

// Mutate applies the UpdateDatabaseInput on the DatabaseMutation builder.
func (i *UpdateDatabaseInput) Mutate(m *DatabaseMutation) {
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Schema; v != nil {
		m.SetSchema(*v)
	}
	if v := i.RelationFigure; v != nil {
		m.SetRelationFigure(*v)
	}
	if i.ClearQuestions {
		m.ClearQuestions()
	}
	if v := i.AddQuestionIDs; len(v) > 0 {
		m.AddQuestionIDs(v...)
	}
	if v := i.RemoveQuestionIDs; len(v) > 0 {
		m.RemoveQuestionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateDatabaseInput on the DatabaseUpdate builder.
func (c *DatabaseUpdate) SetInput(i UpdateDatabaseInput) *DatabaseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDatabaseInput on the DatabaseUpdateOne builder.
func (c *DatabaseUpdateOne) SetInput(i UpdateDatabaseInput) *DatabaseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateGroupInput represents a mutation input for creating groups.
type CreateGroupInput struct {
	Name        string
	Description *string
	ScopeSetIDs []int
}

// Mutate applies the CreateGroupInput on the GroupMutation builder.
func (i *CreateGroupInput) Mutate(m *GroupMutation) {
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ScopeSetIDs; len(v) > 0 {
		m.AddScopeSetIDs(v...)
	}
}

// SetInput applies the change-set in the CreateGroupInput on the GroupCreate builder.
func (c *GroupCreate) SetInput(i CreateGroupInput) *GroupCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateGroupInput represents a mutation input for updating groups.
type UpdateGroupInput struct {
	Name              *string
	ClearDescription  bool
	Description       *string
	ClearScopeSets    bool
	AddScopeSetIDs    []int
	RemoveScopeSetIDs []int
}

// Mutate applies the UpdateGroupInput on the GroupMutation builder.
func (i *UpdateGroupInput) Mutate(m *GroupMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearScopeSets {
		m.ClearScopeSets()
	}
	if v := i.AddScopeSetIDs; len(v) > 0 {
		m.AddScopeSetIDs(v...)
	}
	if v := i.RemoveScopeSetIDs; len(v) > 0 {
		m.RemoveScopeSetIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateGroupInput on the GroupUpdate builder.
func (c *GroupUpdate) SetInput(i UpdateGroupInput) *GroupUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateGroupInput on the GroupUpdateOne builder.
func (c *GroupUpdateOne) SetInput(i UpdateGroupInput) *GroupUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateQuestionInput represents a mutation input for creating questions.
type CreateQuestionInput struct {
	Category        string
	Difficulty      *question.Difficulty
	Title           string
	Description     string
	ReferenceAnswer string
	DatabaseID      int
}

// Mutate applies the CreateQuestionInput on the QuestionMutation builder.
func (i *CreateQuestionInput) Mutate(m *QuestionMutation) {
	m.SetCategory(i.Category)
	if v := i.Difficulty; v != nil {
		m.SetDifficulty(*v)
	}
	m.SetTitle(i.Title)
	m.SetDescription(i.Description)
	m.SetReferenceAnswer(i.ReferenceAnswer)
	m.SetDatabaseID(i.DatabaseID)
}

// SetInput applies the change-set in the CreateQuestionInput on the QuestionCreate builder.
func (c *QuestionCreate) SetInput(i CreateQuestionInput) *QuestionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateQuestionInput represents a mutation input for updating questions.
type UpdateQuestionInput struct {
	Difficulty      *question.Difficulty
	Title           *string
	Description     *string
	ReferenceAnswer *string
	DatabaseID      *int
}

// Mutate applies the UpdateQuestionInput on the QuestionMutation builder.
func (i *UpdateQuestionInput) Mutate(m *QuestionMutation) {
	if v := i.Difficulty; v != nil {
		m.SetDifficulty(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ReferenceAnswer; v != nil {
		m.SetReferenceAnswer(*v)
	}
	if v := i.DatabaseID; v != nil {
		m.SetDatabaseID(*v)
	}
}

// SetInput applies the change-set in the UpdateQuestionInput on the QuestionUpdate builder.
func (c *QuestionUpdate) SetInput(i UpdateQuestionInput) *QuestionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateQuestionInput on the QuestionUpdateOne builder.
func (c *QuestionUpdateOne) SetInput(i UpdateQuestionInput) *QuestionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateScopeSetInput represents a mutation input for creating scopesets.
type CreateScopeSetInput struct {
	Slug        string
	Description *string
	Scopes      []string
	GroupIDs    []int
}

// Mutate applies the CreateScopeSetInput on the ScopeSetMutation builder.
func (i *CreateScopeSetInput) Mutate(m *ScopeSetMutation) {
	m.SetSlug(i.Slug)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	if v := i.GroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
}

// SetInput applies the change-set in the CreateScopeSetInput on the ScopeSetCreate builder.
func (c *ScopeSetCreate) SetInput(i CreateScopeSetInput) *ScopeSetCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateScopeSetInput represents a mutation input for updating scopesets.
type UpdateScopeSetInput struct {
	ClearDescription bool
	Description      *string
	Scopes           []string
	AppendScopes     []string
	ClearGroups      bool
	AddGroupIDs      []int
	RemoveGroupIDs   []int
}

// Mutate applies the UpdateScopeSetInput on the ScopeSetMutation builder.
func (i *UpdateScopeSetInput) Mutate(m *ScopeSetMutation) {
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	if i.AppendScopes != nil {
		m.AppendScopes(i.Scopes)
	}
	if i.ClearGroups {
		m.ClearGroups()
	}
	if v := i.AddGroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.RemoveGroupIDs; len(v) > 0 {
		m.RemoveGroupIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateScopeSetInput on the ScopeSetUpdate builder.
func (c *ScopeSetUpdate) SetInput(i UpdateScopeSetInput) *ScopeSetUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateScopeSetInput on the ScopeSetUpdateOne builder.
func (c *ScopeSetUpdateOne) SetInput(i UpdateScopeSetInput) *ScopeSetUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name     string
	Email    string
	Avatar   *string
	GroupID  int
	PointIDs []int
	EventIDs []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	m.SetGroupID(i.GroupID)
	if v := i.PointIDs; len(v) > 0 {
		m.AddPointIDs(v...)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name           *string
	ClearAvatar    bool
	Avatar         *string
	GroupID        *int
	ClearPoints    bool
	AddPointIDs    []int
	RemovePointIDs []int
	ClearEvents    bool
	AddEventIDs    []int
	RemoveEventIDs []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearAvatar {
		m.ClearAvatar()
	}
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	if v := i.GroupID; v != nil {
		m.SetGroupID(*v)
	}
	if i.ClearPoints {
		m.ClearPoints()
	}
	if v := i.AddPointIDs; len(v) > 0 {
		m.AddPointIDs(v...)
	}
	if v := i.RemovePointIDs; len(v) > 0 {
		m.RemovePointIDs(v...)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
