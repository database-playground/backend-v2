// Code generated by ent, DO NOT EDIT.

package events

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/database-playground/backend-v2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Events {
	return predicate.Events(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Events {
	return predicate.Events(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Events {
	return predicate.Events(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Events {
	return predicate.Events(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Events {
	return predicate.Events(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Events {
	return predicate.Events(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Events {
	return predicate.Events(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldUserID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldType, v))
}

// TriggeredAt applies equality check predicate on the "triggered_at" field. It's identical to TriggeredAtEQ.
func TriggeredAt(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldTriggeredAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Events {
	return predicate.Events(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Events {
	return predicate.Events(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Events {
	return predicate.Events(sql.FieldNotIn(FieldUserID, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Events {
	return predicate.Events(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Events {
	return predicate.Events(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Events {
	return predicate.Events(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Events {
	return predicate.Events(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Events {
	return predicate.Events(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Events {
	return predicate.Events(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Events {
	return predicate.Events(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Events {
	return predicate.Events(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Events {
	return predicate.Events(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Events {
	return predicate.Events(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Events {
	return predicate.Events(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Events {
	return predicate.Events(sql.FieldContainsFold(FieldType, v))
}

// TriggeredAtEQ applies the EQ predicate on the "triggered_at" field.
func TriggeredAtEQ(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldTriggeredAt, v))
}

// TriggeredAtNEQ applies the NEQ predicate on the "triggered_at" field.
func TriggeredAtNEQ(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldNEQ(FieldTriggeredAt, v))
}

// TriggeredAtIn applies the In predicate on the "triggered_at" field.
func TriggeredAtIn(vs ...time.Time) predicate.Events {
	return predicate.Events(sql.FieldIn(FieldTriggeredAt, vs...))
}

// TriggeredAtNotIn applies the NotIn predicate on the "triggered_at" field.
func TriggeredAtNotIn(vs ...time.Time) predicate.Events {
	return predicate.Events(sql.FieldNotIn(FieldTriggeredAt, vs...))
}

// TriggeredAtGT applies the GT predicate on the "triggered_at" field.
func TriggeredAtGT(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldGT(FieldTriggeredAt, v))
}

// TriggeredAtGTE applies the GTE predicate on the "triggered_at" field.
func TriggeredAtGTE(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldGTE(FieldTriggeredAt, v))
}

// TriggeredAtLT applies the LT predicate on the "triggered_at" field.
func TriggeredAtLT(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldLT(FieldTriggeredAt, v))
}

// TriggeredAtLTE applies the LTE predicate on the "triggered_at" field.
func TriggeredAtLTE(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldLTE(FieldTriggeredAt, v))
}

// PayloadIsNil applies the IsNil predicate on the "payload" field.
func PayloadIsNil() predicate.Events {
	return predicate.Events(sql.FieldIsNull(FieldPayload))
}

// PayloadNotNil applies the NotNil predicate on the "payload" field.
func PayloadNotNil() predicate.Events {
	return predicate.Events(sql.FieldNotNull(FieldPayload))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Events {
	return predicate.Events(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Events {
	return predicate.Events(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Events) predicate.Events {
	return predicate.Events(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Events) predicate.Events {
	return predicate.Events(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Events) predicate.Events {
	return predicate.Events(sql.NotPredicates(p))
}
