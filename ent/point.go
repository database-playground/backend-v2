// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/database-playground/backend-v2/ent/point"
	"github.com/database-playground/backend-v2/ent/user"
)

// Point is the model entity for the Point schema.
type Point struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Points holds the value of the "points" field.
	Points int `json:"points,omitempty"`
	// GrantedAt holds the value of the "granted_at" field.
	GrantedAt time.Time `json:"granted_at,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PointQuery when eager-loading is set.
	Edges        PointEdges `json:"edges"`
	user_points  *int
	selectValues sql.SelectValues
}

// PointEdges holds the relations/edges for other nodes in the graph.
type PointEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PointEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Point) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case point.FieldID, point.FieldPoints:
			values[i] = new(sql.NullInt64)
		case point.FieldDescription:
			values[i] = new(sql.NullString)
		case point.FieldGrantedAt:
			values[i] = new(sql.NullTime)
		case point.ForeignKeys[0]: // user_points
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Point fields.
func (_m *Point) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case point.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case point.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				_m.Points = int(value.Int64)
			}
		case point.FieldGrantedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field granted_at", values[i])
			} else if value.Valid {
				_m.GrantedAt = value.Time
			}
		case point.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case point.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_points", value)
			} else if value.Valid {
				_m.user_points = new(int)
				*_m.user_points = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Point.
// This includes values selected through modifiers, order, etc.
func (_m *Point) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Point entity.
func (_m *Point) QueryUser() *UserQuery {
	return NewPointClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this Point.
// Note that you need to call Point.Unwrap() before calling this method if this Point
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Point) Update() *PointUpdateOne {
	return NewPointClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Point entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Point) Unwrap() *Point {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Point is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Point) String() string {
	var builder strings.Builder
	builder.WriteString("Point(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", _m.Points))
	builder.WriteString(", ")
	builder.WriteString("granted_at=")
	builder.WriteString(_m.GrantedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Points is a parsable slice of Point.
type Points []*Point
