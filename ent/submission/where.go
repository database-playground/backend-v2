// Code generated by ent, DO NOT EDIT.

package submission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/database-playground/backend-v2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Submission {
	return predicate.Submission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Submission {
	return predicate.Submission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Submission {
	return predicate.Submission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Submission {
	return predicate.Submission(sql.FieldLTE(FieldID, id))
}

// SubmittedCode applies equality check predicate on the "submitted_code" field. It's identical to SubmittedCodeEQ.
func SubmittedCode(v string) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldSubmittedCode, v))
}

// SubmittedAt applies equality check predicate on the "submitted_at" field. It's identical to SubmittedAtEQ.
func SubmittedAt(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldSubmittedAt, v))
}

// SubmittedCodeEQ applies the EQ predicate on the "submitted_code" field.
func SubmittedCodeEQ(v string) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldSubmittedCode, v))
}

// SubmittedCodeNEQ applies the NEQ predicate on the "submitted_code" field.
func SubmittedCodeNEQ(v string) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldSubmittedCode, v))
}

// SubmittedCodeIn applies the In predicate on the "submitted_code" field.
func SubmittedCodeIn(vs ...string) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldSubmittedCode, vs...))
}

// SubmittedCodeNotIn applies the NotIn predicate on the "submitted_code" field.
func SubmittedCodeNotIn(vs ...string) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldSubmittedCode, vs...))
}

// SubmittedCodeGT applies the GT predicate on the "submitted_code" field.
func SubmittedCodeGT(v string) predicate.Submission {
	return predicate.Submission(sql.FieldGT(FieldSubmittedCode, v))
}

// SubmittedCodeGTE applies the GTE predicate on the "submitted_code" field.
func SubmittedCodeGTE(v string) predicate.Submission {
	return predicate.Submission(sql.FieldGTE(FieldSubmittedCode, v))
}

// SubmittedCodeLT applies the LT predicate on the "submitted_code" field.
func SubmittedCodeLT(v string) predicate.Submission {
	return predicate.Submission(sql.FieldLT(FieldSubmittedCode, v))
}

// SubmittedCodeLTE applies the LTE predicate on the "submitted_code" field.
func SubmittedCodeLTE(v string) predicate.Submission {
	return predicate.Submission(sql.FieldLTE(FieldSubmittedCode, v))
}

// SubmittedCodeContains applies the Contains predicate on the "submitted_code" field.
func SubmittedCodeContains(v string) predicate.Submission {
	return predicate.Submission(sql.FieldContains(FieldSubmittedCode, v))
}

// SubmittedCodeHasPrefix applies the HasPrefix predicate on the "submitted_code" field.
func SubmittedCodeHasPrefix(v string) predicate.Submission {
	return predicate.Submission(sql.FieldHasPrefix(FieldSubmittedCode, v))
}

// SubmittedCodeHasSuffix applies the HasSuffix predicate on the "submitted_code" field.
func SubmittedCodeHasSuffix(v string) predicate.Submission {
	return predicate.Submission(sql.FieldHasSuffix(FieldSubmittedCode, v))
}

// SubmittedCodeEqualFold applies the EqualFold predicate on the "submitted_code" field.
func SubmittedCodeEqualFold(v string) predicate.Submission {
	return predicate.Submission(sql.FieldEqualFold(FieldSubmittedCode, v))
}

// SubmittedCodeContainsFold applies the ContainsFold predicate on the "submitted_code" field.
func SubmittedCodeContainsFold(v string) predicate.Submission {
	return predicate.Submission(sql.FieldContainsFold(FieldSubmittedCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldStatus, vs...))
}

// SubmittedAtEQ applies the EQ predicate on the "submitted_at" field.
func SubmittedAtEQ(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldSubmittedAt, v))
}

// SubmittedAtNEQ applies the NEQ predicate on the "submitted_at" field.
func SubmittedAtNEQ(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldSubmittedAt, v))
}

// SubmittedAtIn applies the In predicate on the "submitted_at" field.
func SubmittedAtIn(vs ...time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldSubmittedAt, vs...))
}

// SubmittedAtNotIn applies the NotIn predicate on the "submitted_at" field.
func SubmittedAtNotIn(vs ...time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldSubmittedAt, vs...))
}

// SubmittedAtGT applies the GT predicate on the "submitted_at" field.
func SubmittedAtGT(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldGT(FieldSubmittedAt, v))
}

// SubmittedAtGTE applies the GTE predicate on the "submitted_at" field.
func SubmittedAtGTE(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldGTE(FieldSubmittedAt, v))
}

// SubmittedAtLT applies the LT predicate on the "submitted_at" field.
func SubmittedAtLT(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldLT(FieldSubmittedAt, v))
}

// SubmittedAtLTE applies the LTE predicate on the "submitted_at" field.
func SubmittedAtLTE(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldLTE(FieldSubmittedAt, v))
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		step := newQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Submission) predicate.Submission {
	return predicate.Submission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Submission) predicate.Submission {
	return predicate.Submission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Submission) predicate.Submission {
	return predicate.Submission(sql.NotPredicates(p))
}
