// Code generated by ent, DO NOT EDIT.

package submission

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the submission type in the database.
	Label = "submission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSubmittedCode holds the string denoting the submitted_code field in the database.
	FieldSubmittedCode = "submitted_code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldQueryResult holds the string denoting the query_result field in the database.
	FieldQueryResult = "query_result"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldSubmittedAt holds the string denoting the submitted_at field in the database.
	FieldSubmittedAt = "submitted_at"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "question"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the submission in the database.
	Table = "submissions"
	// QuestionTable is the table that holds the question relation/edge.
	QuestionTable = "submissions"
	// QuestionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionInverseTable = "questions"
	// QuestionColumn is the table column denoting the question relation/edge.
	QuestionColumn = "question_submissions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "submissions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_submissions"
)

// Columns holds all SQL columns for submission fields.
var Columns = []string{
	FieldID,
	FieldSubmittedCode,
	FieldStatus,
	FieldQueryResult,
	FieldError,
	FieldSubmittedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "submissions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"question_submissions",
	"user_submissions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// SubmittedCodeValidator is a validator for the "submitted_code" field. It is called by the builders before save.
	SubmittedCodeValidator func(string) error
	// DefaultSubmittedAt holds the default value on creation for the "submitted_at" field.
	DefaultSubmittedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending Status = "pending"
	StatusSuccess Status = "success"
	StatusFailed  Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusSuccess, StatusFailed:
		return nil
	default:
		return fmt.Errorf("submission: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Submission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySubmittedCode orders the results by the submitted_code field.
func BySubmittedCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubmittedCode, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// BySubmittedAt orders the results by the submitted_at field.
func BySubmittedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubmittedAt, opts...).ToFunc()
}

// ByQuestionField orders the results by question field.
func ByQuestionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
