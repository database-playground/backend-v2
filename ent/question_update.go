// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/database-playground/backend-v2/ent/database"
	"github.com/database-playground/backend-v2/ent/predicate"
	"github.com/database-playground/backend-v2/ent/question"
	"github.com/database-playground/backend-v2/ent/submission"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (_u *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetDifficulty sets the "difficulty" field.
func (_u *QuestionUpdate) SetDifficulty(v question.Difficulty) *QuestionUpdate {
	_u.mutation.SetDifficulty(v)
	return _u
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (_u *QuestionUpdate) SetNillableDifficulty(v *question.Difficulty) *QuestionUpdate {
	if v != nil {
		_u.SetDifficulty(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *QuestionUpdate) SetTitle(v string) *QuestionUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *QuestionUpdate) SetNillableTitle(v *string) *QuestionUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *QuestionUpdate) SetDescription(v string) *QuestionUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *QuestionUpdate) SetNillableDescription(v *string) *QuestionUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetReferenceAnswer sets the "reference_answer" field.
func (_u *QuestionUpdate) SetReferenceAnswer(v string) *QuestionUpdate {
	_u.mutation.SetReferenceAnswer(v)
	return _u
}

// SetNillableReferenceAnswer sets the "reference_answer" field if the given value is not nil.
func (_u *QuestionUpdate) SetNillableReferenceAnswer(v *string) *QuestionUpdate {
	if v != nil {
		_u.SetReferenceAnswer(*v)
	}
	return _u
}

// SetDatabaseID sets the "database" edge to the Database entity by ID.
func (_u *QuestionUpdate) SetDatabaseID(id int) *QuestionUpdate {
	_u.mutation.SetDatabaseID(id)
	return _u
}

// SetDatabase sets the "database" edge to the Database entity.
func (_u *QuestionUpdate) SetDatabase(v *Database) *QuestionUpdate {
	return _u.SetDatabaseID(v.ID)
}

// AddSubmissionIDs adds the "submissions" edge to the Submission entity by IDs.
func (_u *QuestionUpdate) AddSubmissionIDs(ids ...int) *QuestionUpdate {
	_u.mutation.AddSubmissionIDs(ids...)
	return _u
}

// AddSubmissions adds the "submissions" edges to the Submission entity.
func (_u *QuestionUpdate) AddSubmissions(v ...*Submission) *QuestionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubmissionIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (_u *QuestionUpdate) Mutation() *QuestionMutation {
	return _u.mutation
}

// ClearDatabase clears the "database" edge to the Database entity.
func (_u *QuestionUpdate) ClearDatabase() *QuestionUpdate {
	_u.mutation.ClearDatabase()
	return _u
}

// ClearSubmissions clears all "submissions" edges to the Submission entity.
func (_u *QuestionUpdate) ClearSubmissions() *QuestionUpdate {
	_u.mutation.ClearSubmissions()
	return _u
}

// RemoveSubmissionIDs removes the "submissions" edge to Submission entities by IDs.
func (_u *QuestionUpdate) RemoveSubmissionIDs(ids ...int) *QuestionUpdate {
	_u.mutation.RemoveSubmissionIDs(ids...)
	return _u
}

// RemoveSubmissions removes "submissions" edges to Submission entities.
func (_u *QuestionUpdate) RemoveSubmissions(v ...*Submission) *QuestionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubmissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *QuestionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *QuestionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *QuestionUpdate) check() error {
	if v, ok := _u.mutation.Difficulty(); ok {
		if err := question.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "Question.difficulty": %w`, err)}
		}
	}
	if _u.mutation.DatabaseCleared() && len(_u.mutation.DatabaseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Question.database"`)
	}
	return nil
}

func (_u *QuestionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Difficulty(); ok {
		_spec.SetField(question.FieldDifficulty, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(question.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(question.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.ReferenceAnswer(); ok {
		_spec.SetField(question.FieldReferenceAnswer, field.TypeString, value)
	}
	if _u.mutation.DatabaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.DatabaseTable,
			Columns: []string{question.DatabaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DatabaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.DatabaseTable,
			Columns: []string{question.DatabaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SubmissionsTable,
			Columns: []string{question.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubmissionsIDs(); len(nodes) > 0 && !_u.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SubmissionsTable,
			Columns: []string{question.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SubmissionsTable,
			Columns: []string{question.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetDifficulty sets the "difficulty" field.
func (_u *QuestionUpdateOne) SetDifficulty(v question.Difficulty) *QuestionUpdateOne {
	_u.mutation.SetDifficulty(v)
	return _u
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (_u *QuestionUpdateOne) SetNillableDifficulty(v *question.Difficulty) *QuestionUpdateOne {
	if v != nil {
		_u.SetDifficulty(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *QuestionUpdateOne) SetTitle(v string) *QuestionUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *QuestionUpdateOne) SetNillableTitle(v *string) *QuestionUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *QuestionUpdateOne) SetDescription(v string) *QuestionUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *QuestionUpdateOne) SetNillableDescription(v *string) *QuestionUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetReferenceAnswer sets the "reference_answer" field.
func (_u *QuestionUpdateOne) SetReferenceAnswer(v string) *QuestionUpdateOne {
	_u.mutation.SetReferenceAnswer(v)
	return _u
}

// SetNillableReferenceAnswer sets the "reference_answer" field if the given value is not nil.
func (_u *QuestionUpdateOne) SetNillableReferenceAnswer(v *string) *QuestionUpdateOne {
	if v != nil {
		_u.SetReferenceAnswer(*v)
	}
	return _u
}

// SetDatabaseID sets the "database" edge to the Database entity by ID.
func (_u *QuestionUpdateOne) SetDatabaseID(id int) *QuestionUpdateOne {
	_u.mutation.SetDatabaseID(id)
	return _u
}

// SetDatabase sets the "database" edge to the Database entity.
func (_u *QuestionUpdateOne) SetDatabase(v *Database) *QuestionUpdateOne {
	return _u.SetDatabaseID(v.ID)
}

// AddSubmissionIDs adds the "submissions" edge to the Submission entity by IDs.
func (_u *QuestionUpdateOne) AddSubmissionIDs(ids ...int) *QuestionUpdateOne {
	_u.mutation.AddSubmissionIDs(ids...)
	return _u
}

// AddSubmissions adds the "submissions" edges to the Submission entity.
func (_u *QuestionUpdateOne) AddSubmissions(v ...*Submission) *QuestionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubmissionIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (_u *QuestionUpdateOne) Mutation() *QuestionMutation {
	return _u.mutation
}

// ClearDatabase clears the "database" edge to the Database entity.
func (_u *QuestionUpdateOne) ClearDatabase() *QuestionUpdateOne {
	_u.mutation.ClearDatabase()
	return _u
}

// ClearSubmissions clears all "submissions" edges to the Submission entity.
func (_u *QuestionUpdateOne) ClearSubmissions() *QuestionUpdateOne {
	_u.mutation.ClearSubmissions()
	return _u
}

// RemoveSubmissionIDs removes the "submissions" edge to Submission entities by IDs.
func (_u *QuestionUpdateOne) RemoveSubmissionIDs(ids ...int) *QuestionUpdateOne {
	_u.mutation.RemoveSubmissionIDs(ids...)
	return _u
}

// RemoveSubmissions removes "submissions" edges to Submission entities.
func (_u *QuestionUpdateOne) RemoveSubmissions(v ...*Submission) *QuestionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubmissionIDs(ids...)
}

// Where appends a list predicates to the QuestionUpdate builder.
func (_u *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Question entity.
func (_u *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *QuestionUpdateOne) check() error {
	if v, ok := _u.mutation.Difficulty(); ok {
		if err := question.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "Question.difficulty": %w`, err)}
		}
	}
	if _u.mutation.DatabaseCleared() && len(_u.mutation.DatabaseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Question.database"`)
	}
	return nil
}

func (_u *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Difficulty(); ok {
		_spec.SetField(question.FieldDifficulty, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(question.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(question.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.ReferenceAnswer(); ok {
		_spec.SetField(question.FieldReferenceAnswer, field.TypeString, value)
	}
	if _u.mutation.DatabaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.DatabaseTable,
			Columns: []string{question.DatabaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DatabaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.DatabaseTable,
			Columns: []string{question.DatabaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SubmissionsTable,
			Columns: []string{question.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubmissionsIDs(); len(nodes) > 0 && !_u.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SubmissionsTable,
			Columns: []string{question.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SubmissionsTable,
			Columns: []string{question.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
