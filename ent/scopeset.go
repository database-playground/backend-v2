// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/database-playground/backend-v2/ent/scopeset"
)

// ScopeSet is the model entity for the ScopeSet schema.
type ScopeSet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScopeSetQuery when eager-loading is set.
	Edges        ScopeSetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScopeSetEdges holds the relations/edges for other nodes in the graph.
type ScopeSetEdges struct {
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedGroups map[string][]*Group
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e ScopeSetEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[0] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScopeSet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scopeset.FieldScopes:
			values[i] = new([]byte)
		case scopeset.FieldID:
			values[i] = new(sql.NullInt64)
		case scopeset.FieldSlug, scopeset.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScopeSet fields.
func (ss *ScopeSet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scopeset.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ss.ID = int(value.Int64)
		case scopeset.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				ss.Slug = value.String
			}
		case scopeset.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ss.Description = value.String
			}
		case scopeset.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ss.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScopeSet.
// This includes values selected through modifiers, order, etc.
func (ss *ScopeSet) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// QueryGroups queries the "groups" edge of the ScopeSet entity.
func (ss *ScopeSet) QueryGroups() *GroupQuery {
	return NewScopeSetClient(ss.config).QueryGroups(ss)
}

// Update returns a builder for updating this ScopeSet.
// Note that you need to call ScopeSet.Unwrap() before calling this method if this ScopeSet
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *ScopeSet) Update() *ScopeSetUpdateOne {
	return NewScopeSetClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the ScopeSet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *ScopeSet) Unwrap() *ScopeSet {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScopeSet is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *ScopeSet) String() string {
	var builder strings.Builder
	builder.WriteString("ScopeSet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("slug=")
	builder.WriteString(ss.Slug)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ss.Description)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", ss.Scopes))
	builder.WriteByte(')')
	return builder.String()
}

// NamedGroups returns the Groups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ss *ScopeSet) NamedGroups(name string) ([]*Group, error) {
	if ss.Edges.namedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ss.Edges.namedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ss *ScopeSet) appendNamedGroups(name string, edges ...*Group) {
	if ss.Edges.namedGroups == nil {
		ss.Edges.namedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		ss.Edges.namedGroups[name] = []*Group{}
	} else {
		ss.Edges.namedGroups[name] = append(ss.Edges.namedGroups[name], edges...)
	}
}

// ScopeSets is a parsable slice of ScopeSet.
type ScopeSets []*ScopeSet
