// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/database-playground/backend-v2/ent/database"
	"github.com/database-playground/backend-v2/ent/events"
	"github.com/database-playground/backend-v2/ent/group"
	"github.com/database-playground/backend-v2/ent/points"
	"github.com/database-playground/backend-v2/ent/question"
	"github.com/database-playground/backend-v2/ent/scopeset"
	"github.com/database-playground/backend-v2/ent/submission"
	"github.com/database-playground/backend-v2/ent/user"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *DatabaseQuery) CollectFields(ctx context.Context, satisfies ...string) (*DatabaseQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *DatabaseQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(database.Columns))
		selectedFields = []string{database.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "questions":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&QuestionClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, questionImplementors)...); err != nil {
				return err
			}
			_q.WithNamedQuestions(alias, func(wq *QuestionQuery) {
				*wq = *query
			})
		case "slug":
			if _, ok := fieldSeen[database.FieldSlug]; !ok {
				selectedFields = append(selectedFields, database.FieldSlug)
				fieldSeen[database.FieldSlug] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[database.FieldDescription]; !ok {
				selectedFields = append(selectedFields, database.FieldDescription)
				fieldSeen[database.FieldDescription] = struct{}{}
			}
		case "schema":
			if _, ok := fieldSeen[database.FieldSchema]; !ok {
				selectedFields = append(selectedFields, database.FieldSchema)
				fieldSeen[database.FieldSchema] = struct{}{}
			}
		case "relationFigure":
			if _, ok := fieldSeen[database.FieldRelationFigure]; !ok {
				selectedFields = append(selectedFields, database.FieldRelationFigure)
				fieldSeen[database.FieldRelationFigure] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type databasePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DatabasePaginateOption
}

func newDatabasePaginateArgs(rv map[string]any) *databasePaginateArgs {
	args := &databasePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*DatabaseWhereInput); ok {
		args.opts = append(args.opts, WithDatabaseFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *EventsQuery) CollectFields(ctx context.Context, satisfies ...string) (*EventsQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *EventsQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(events.Columns))
		selectedFields = []string{events.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			_q.withUser = query
			if _, ok := fieldSeen[events.FieldUserID]; !ok {
				selectedFields = append(selectedFields, events.FieldUserID)
				fieldSeen[events.FieldUserID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[events.FieldUserID]; !ok {
				selectedFields = append(selectedFields, events.FieldUserID)
				fieldSeen[events.FieldUserID] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[events.FieldType]; !ok {
				selectedFields = append(selectedFields, events.FieldType)
				fieldSeen[events.FieldType] = struct{}{}
			}
		case "triggeredAt":
			if _, ok := fieldSeen[events.FieldTriggeredAt]; !ok {
				selectedFields = append(selectedFields, events.FieldTriggeredAt)
				fieldSeen[events.FieldTriggeredAt] = struct{}{}
			}
		case "payload":
			if _, ok := fieldSeen[events.FieldPayload]; !ok {
				selectedFields = append(selectedFields, events.FieldPayload)
				fieldSeen[events.FieldPayload] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type eventsPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EventsPaginateOption
}

func newEventsPaginateArgs(rv map[string]any) *eventsPaginateArgs {
	args := &eventsPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*EventsWhereInput); ok {
		args.opts = append(args.opts, WithEventsFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *GroupQuery) CollectFields(ctx context.Context, satisfies ...string) (*GroupQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *GroupQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(group.Columns))
		selectedFields = []string{group.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "scopeSets":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ScopeSetClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, scopesetImplementors)...); err != nil {
				return err
			}
			_q.WithNamedScopeSets(alias, func(wq *ScopeSetQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[group.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, group.FieldCreatedAt)
				fieldSeen[group.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[group.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, group.FieldUpdatedAt)
				fieldSeen[group.FieldUpdatedAt] = struct{}{}
			}
		case "deletedAt":
			if _, ok := fieldSeen[group.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, group.FieldDeletedAt)
				fieldSeen[group.FieldDeletedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[group.FieldName]; !ok {
				selectedFields = append(selectedFields, group.FieldName)
				fieldSeen[group.FieldName] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[group.FieldDescription]; !ok {
				selectedFields = append(selectedFields, group.FieldDescription)
				fieldSeen[group.FieldDescription] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type groupPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GroupPaginateOption
}

func newGroupPaginateArgs(rv map[string]any) *groupPaginateArgs {
	args := &groupPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*GroupWhereInput); ok {
		args.opts = append(args.opts, WithGroupFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *PointsQuery) CollectFields(ctx context.Context, satisfies ...string) (*PointsQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *PointsQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(points.Columns))
		selectedFields = []string{points.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			_q.withUser = query
		case "points":
			if _, ok := fieldSeen[points.FieldPoints]; !ok {
				selectedFields = append(selectedFields, points.FieldPoints)
				fieldSeen[points.FieldPoints] = struct{}{}
			}
		case "grantedAt":
			if _, ok := fieldSeen[points.FieldGrantedAt]; !ok {
				selectedFields = append(selectedFields, points.FieldGrantedAt)
				fieldSeen[points.FieldGrantedAt] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[points.FieldDescription]; !ok {
				selectedFields = append(selectedFields, points.FieldDescription)
				fieldSeen[points.FieldDescription] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type pointsPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PointsPaginateOption
}

func newPointsPaginateArgs(rv map[string]any) *pointsPaginateArgs {
	args := &pointsPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*PointsWhereInput); ok {
		args.opts = append(args.opts, WithPointsFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *QuestionQuery) CollectFields(ctx context.Context, satisfies ...string) (*QuestionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *QuestionQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(question.Columns))
		selectedFields = []string{question.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "database":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DatabaseClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, databaseImplementors)...); err != nil {
				return err
			}
			_q.withDatabase = query

		case "submissions":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&SubmissionClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, submissionImplementors)...); err != nil {
				return err
			}
			_q.WithNamedSubmissions(alias, func(wq *SubmissionQuery) {
				*wq = *query
			})
		case "category":
			if _, ok := fieldSeen[question.FieldCategory]; !ok {
				selectedFields = append(selectedFields, question.FieldCategory)
				fieldSeen[question.FieldCategory] = struct{}{}
			}
		case "difficulty":
			if _, ok := fieldSeen[question.FieldDifficulty]; !ok {
				selectedFields = append(selectedFields, question.FieldDifficulty)
				fieldSeen[question.FieldDifficulty] = struct{}{}
			}
		case "title":
			if _, ok := fieldSeen[question.FieldTitle]; !ok {
				selectedFields = append(selectedFields, question.FieldTitle)
				fieldSeen[question.FieldTitle] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[question.FieldDescription]; !ok {
				selectedFields = append(selectedFields, question.FieldDescription)
				fieldSeen[question.FieldDescription] = struct{}{}
			}
		case "referenceAnswer":
			if _, ok := fieldSeen[question.FieldReferenceAnswer]; !ok {
				selectedFields = append(selectedFields, question.FieldReferenceAnswer)
				fieldSeen[question.FieldReferenceAnswer] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type questionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []QuestionPaginateOption
}

func newQuestionPaginateArgs(rv map[string]any) *questionPaginateArgs {
	args := &questionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &QuestionOrder{Field: &QuestionOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithQuestionOrder(order))
			}
		case *QuestionOrder:
			if v != nil {
				args.opts = append(args.opts, WithQuestionOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*QuestionWhereInput); ok {
		args.opts = append(args.opts, WithQuestionFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *ScopeSetQuery) CollectFields(ctx context.Context, satisfies ...string) (*ScopeSetQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *ScopeSetQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(scopeset.Columns))
		selectedFields = []string{scopeset.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "groups":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GroupClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, groupImplementors)...); err != nil {
				return err
			}
			_q.WithNamedGroups(alias, func(wq *GroupQuery) {
				*wq = *query
			})
		case "slug":
			if _, ok := fieldSeen[scopeset.FieldSlug]; !ok {
				selectedFields = append(selectedFields, scopeset.FieldSlug)
				fieldSeen[scopeset.FieldSlug] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[scopeset.FieldDescription]; !ok {
				selectedFields = append(selectedFields, scopeset.FieldDescription)
				fieldSeen[scopeset.FieldDescription] = struct{}{}
			}
		case "scopes":
			if _, ok := fieldSeen[scopeset.FieldScopes]; !ok {
				selectedFields = append(selectedFields, scopeset.FieldScopes)
				fieldSeen[scopeset.FieldScopes] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type scopesetPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ScopeSetPaginateOption
}

func newScopeSetPaginateArgs(rv map[string]any) *scopesetPaginateArgs {
	args := &scopesetPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ScopeSetWhereInput); ok {
		args.opts = append(args.opts, WithScopeSetFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *SubmissionQuery) CollectFields(ctx context.Context, satisfies ...string) (*SubmissionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *SubmissionQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(submission.Columns))
		selectedFields = []string{submission.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "question":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&QuestionClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, questionImplementors)...); err != nil {
				return err
			}
			_q.withQuestion = query

		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			_q.withUser = query
		case "submittedCode":
			if _, ok := fieldSeen[submission.FieldSubmittedCode]; !ok {
				selectedFields = append(selectedFields, submission.FieldSubmittedCode)
				fieldSeen[submission.FieldSubmittedCode] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[submission.FieldStatus]; !ok {
				selectedFields = append(selectedFields, submission.FieldStatus)
				fieldSeen[submission.FieldStatus] = struct{}{}
			}
		case "result":
			if _, ok := fieldSeen[submission.FieldResult]; !ok {
				selectedFields = append(selectedFields, submission.FieldResult)
				fieldSeen[submission.FieldResult] = struct{}{}
			}
		case "submittedAt":
			if _, ok := fieldSeen[submission.FieldSubmittedAt]; !ok {
				selectedFields = append(selectedFields, submission.FieldSubmittedAt)
				fieldSeen[submission.FieldSubmittedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type submissionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []SubmissionPaginateOption
}

func newSubmissionPaginateArgs(rv map[string]any) *submissionPaginateArgs {
	args := &submissionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*SubmissionWhereInput); ok {
		args.opts = append(args.opts, WithSubmissionFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *UserQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "group":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GroupClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, groupImplementors)...); err != nil {
				return err
			}
			_q.withGroup = query

		case "points":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PointsClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, pointsImplementors)...); err != nil {
				return err
			}
			_q.WithNamedPoints(alias, func(wq *PointsQuery) {
				*wq = *query
			})

		case "events":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EventsClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, eventsImplementors)...); err != nil {
				return err
			}
			_q.WithNamedEvents(alias, func(wq *EventsQuery) {
				*wq = *query
			})

		case "submissions":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&SubmissionClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, submissionImplementors)...); err != nil {
				return err
			}
			_q.WithNamedSubmissions(alias, func(wq *SubmissionQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[user.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldCreatedAt)
				fieldSeen[user.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[user.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldUpdatedAt)
				fieldSeen[user.FieldUpdatedAt] = struct{}{}
			}
		case "deletedAt":
			if _, ok := fieldSeen[user.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldDeletedAt)
				fieldSeen[user.FieldDeletedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[user.FieldName]; !ok {
				selectedFields = append(selectedFields, user.FieldName)
				fieldSeen[user.FieldName] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[user.FieldEmail]; !ok {
				selectedFields = append(selectedFields, user.FieldEmail)
				fieldSeen[user.FieldEmail] = struct{}{}
			}
		case "avatar":
			if _, ok := fieldSeen[user.FieldAvatar]; !ok {
				selectedFields = append(selectedFields, user.FieldAvatar)
				fieldSeen[user.FieldAvatar] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]any) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &UserOrder{Field: &UserOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithUserOrder(order))
			}
		case *UserOrder:
			if v != nil {
				args.opts = append(args.opts, WithUserOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok || v == nil {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
