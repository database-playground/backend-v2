// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (_m *Database) Questions(ctx context.Context) (result []*Question, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedQuestions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.QuestionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryQuestions().All(ctx)
	}
	return result, err
}

func (_m *Events) User(ctx context.Context) (*User, error) {
	result, err := _m.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryUser().Only(ctx)
	}
	return result, err
}

func (_m *Group) ScopeSets(ctx context.Context) (result []*ScopeSet, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedScopeSets(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.ScopeSetsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryScopeSets().All(ctx)
	}
	return result, err
}

func (_m *Points) User(ctx context.Context) (*User, error) {
	result, err := _m.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryUser().Only(ctx)
	}
	return result, err
}

func (_m *Question) Database(ctx context.Context) (*Database, error) {
	result, err := _m.Edges.DatabaseOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryDatabase().Only(ctx)
	}
	return result, err
}

func (_m *Question) Submissions(ctx context.Context) (result []*Submission, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedSubmissions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.SubmissionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QuerySubmissions().All(ctx)
	}
	return result, err
}

func (_m *ScopeSet) Groups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.GroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryGroups().All(ctx)
	}
	return result, err
}

func (_m *Submission) Question(ctx context.Context) (*Question, error) {
	result, err := _m.Edges.QuestionOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryQuestion().Only(ctx)
	}
	return result, err
}

func (_m *Submission) User(ctx context.Context) (*User, error) {
	result, err := _m.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryUser().Only(ctx)
	}
	return result, err
}

func (_m *User) Group(ctx context.Context) (*Group, error) {
	result, err := _m.Edges.GroupOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryGroup().Only(ctx)
	}
	return result, err
}

func (_m *User) Points(ctx context.Context) (result []*Points, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedPoints(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.PointsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryPoints().All(ctx)
	}
	return result, err
}

func (_m *User) Events(ctx context.Context) (result []*Events, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryEvents().All(ctx)
	}
	return result, err
}

func (_m *User) Submissions(ctx context.Context) (result []*Submission, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedSubmissions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.SubmissionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QuerySubmissions().All(ctx)
	}
	return result, err
}
