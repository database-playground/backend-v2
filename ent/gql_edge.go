// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (_m *Database) Questions(ctx context.Context) (result []*Question, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedQuestions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.QuestionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryQuestions().All(ctx)
	}
	return result, err
}

func (_m *Event) User(ctx context.Context) (*User, error) {
	result, err := _m.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryUser().Only(ctx)
	}
	return result, err
}

func (_m *Group) ScopeSets(ctx context.Context) (result []*ScopeSet, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedScopeSets(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.ScopeSetsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryScopeSets().All(ctx)
	}
	return result, err
}

func (_m *Point) User(ctx context.Context) (*User, error) {
	result, err := _m.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryUser().Only(ctx)
	}
	return result, err
}

func (_m *Question) Database(ctx context.Context) (*Database, error) {
	result, err := _m.Edges.DatabaseOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryDatabase().Only(ctx)
	}
	return result, err
}

func (_m *Question) Submissions(ctx context.Context) (result []*Submission, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedSubmissions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.SubmissionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QuerySubmissions().All(ctx)
	}
	return result, err
}

func (_m *ScopeSet) Groups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.GroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryGroups().All(ctx)
	}
	return result, err
}

func (_m *Submission) Question(ctx context.Context) (*Question, error) {
	result, err := _m.Edges.QuestionOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryQuestion().Only(ctx)
	}
	return result, err
}

func (_m *Submission) User(ctx context.Context) (*User, error) {
	result, err := _m.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryUser().Only(ctx)
	}
	return result, err
}

func (_m *User) Group(ctx context.Context) (*Group, error) {
	result, err := _m.Edges.GroupOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryGroup().Only(ctx)
	}
	return result, err
}

func (_m *User) Points(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *PointOrder, where *PointWhereInput,
) (*PointConnection, error) {
	opts := []PointPaginateOption{
		WithPointOrder(orderBy),
		WithPointFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := _m.Edges.totalCount[1][alias]
	if nodes, err := _m.NamedPoints(alias); err == nil || hasTotalCount {
		pager, err := newPointPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &PointConnection{Edges: []*PointEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return _m.QueryPoints().Paginate(ctx, after, first, before, last, opts...)
}

func (_m *User) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := _m.Edges.totalCount[2][alias]
	if nodes, err := _m.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return _m.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (_m *User) Submissions(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *SubmissionOrder, where *SubmissionWhereInput,
) (*SubmissionConnection, error) {
	opts := []SubmissionPaginateOption{
		WithSubmissionOrder(orderBy),
		WithSubmissionFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := _m.Edges.totalCount[3][alias]
	if nodes, err := _m.NamedSubmissions(alias); err == nil || hasTotalCount {
		pager, err := newSubmissionPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubmissionConnection{Edges: []*SubmissionEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return _m.QuerySubmissions().Paginate(ctx, after, first, before, last, opts...)
}
