// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (d *Database) Questions(ctx context.Context) (result []*Question, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedQuestions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.QuestionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryQuestions().All(ctx)
	}
	return result, err
}

func (gr *Group) ScopeSets(ctx context.Context) (result []*ScopeSet, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedScopeSets(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ScopeSetsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryScopeSets().All(ctx)
	}
	return result, err
}

func (q *Question) Database(ctx context.Context) (*Database, error) {
	result, err := q.Edges.DatabaseOrErr()
	if IsNotLoaded(err) {
		result, err = q.QueryDatabase().Only(ctx)
	}
	return result, err
}

func (ss *ScopeSet) Groups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ss.NamedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ss.Edges.GroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ss.QueryGroups().All(ctx)
	}
	return result, err
}

func (u *User) Group(ctx context.Context) (*Group, error) {
	result, err := u.Edges.GroupOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryGroup().Only(ctx)
	}
	return result, err
}
