// Code generated by ent, DO NOT EDIT.

package database

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/database-playground/backend-v2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Database {
	return predicate.Database(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Database {
	return predicate.Database(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Database {
	return predicate.Database(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Database {
	return predicate.Database(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Database {
	return predicate.Database(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Database {
	return predicate.Database(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Database {
	return predicate.Database(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Database {
	return predicate.Database(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Database {
	return predicate.Database(sql.FieldLTE(FieldID, id))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Database {
	return predicate.Database(sql.FieldEQ(FieldSlug, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Database {
	return predicate.Database(sql.FieldEQ(FieldDescription, v))
}

// Schema applies equality check predicate on the "schema" field. It's identical to SchemaEQ.
func Schema(v string) predicate.Database {
	return predicate.Database(sql.FieldEQ(FieldSchema, v))
}

// RelationFigure applies equality check predicate on the "relation_figure" field. It's identical to RelationFigureEQ.
func RelationFigure(v string) predicate.Database {
	return predicate.Database(sql.FieldEQ(FieldRelationFigure, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Database {
	return predicate.Database(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Database {
	return predicate.Database(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Database {
	return predicate.Database(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Database {
	return predicate.Database(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Database {
	return predicate.Database(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Database {
	return predicate.Database(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Database {
	return predicate.Database(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Database {
	return predicate.Database(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Database {
	return predicate.Database(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Database {
	return predicate.Database(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Database {
	return predicate.Database(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Database {
	return predicate.Database(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Database {
	return predicate.Database(sql.FieldContainsFold(FieldSlug, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Database {
	return predicate.Database(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Database {
	return predicate.Database(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Database {
	return predicate.Database(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Database {
	return predicate.Database(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Database {
	return predicate.Database(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Database {
	return predicate.Database(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Database {
	return predicate.Database(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Database {
	return predicate.Database(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Database {
	return predicate.Database(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Database {
	return predicate.Database(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Database {
	return predicate.Database(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Database {
	return predicate.Database(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Database {
	return predicate.Database(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Database {
	return predicate.Database(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Database {
	return predicate.Database(sql.FieldContainsFold(FieldDescription, v))
}

// SchemaEQ applies the EQ predicate on the "schema" field.
func SchemaEQ(v string) predicate.Database {
	return predicate.Database(sql.FieldEQ(FieldSchema, v))
}

// SchemaNEQ applies the NEQ predicate on the "schema" field.
func SchemaNEQ(v string) predicate.Database {
	return predicate.Database(sql.FieldNEQ(FieldSchema, v))
}

// SchemaIn applies the In predicate on the "schema" field.
func SchemaIn(vs ...string) predicate.Database {
	return predicate.Database(sql.FieldIn(FieldSchema, vs...))
}

// SchemaNotIn applies the NotIn predicate on the "schema" field.
func SchemaNotIn(vs ...string) predicate.Database {
	return predicate.Database(sql.FieldNotIn(FieldSchema, vs...))
}

// SchemaGT applies the GT predicate on the "schema" field.
func SchemaGT(v string) predicate.Database {
	return predicate.Database(sql.FieldGT(FieldSchema, v))
}

// SchemaGTE applies the GTE predicate on the "schema" field.
func SchemaGTE(v string) predicate.Database {
	return predicate.Database(sql.FieldGTE(FieldSchema, v))
}

// SchemaLT applies the LT predicate on the "schema" field.
func SchemaLT(v string) predicate.Database {
	return predicate.Database(sql.FieldLT(FieldSchema, v))
}

// SchemaLTE applies the LTE predicate on the "schema" field.
func SchemaLTE(v string) predicate.Database {
	return predicate.Database(sql.FieldLTE(FieldSchema, v))
}

// SchemaContains applies the Contains predicate on the "schema" field.
func SchemaContains(v string) predicate.Database {
	return predicate.Database(sql.FieldContains(FieldSchema, v))
}

// SchemaHasPrefix applies the HasPrefix predicate on the "schema" field.
func SchemaHasPrefix(v string) predicate.Database {
	return predicate.Database(sql.FieldHasPrefix(FieldSchema, v))
}

// SchemaHasSuffix applies the HasSuffix predicate on the "schema" field.
func SchemaHasSuffix(v string) predicate.Database {
	return predicate.Database(sql.FieldHasSuffix(FieldSchema, v))
}

// SchemaEqualFold applies the EqualFold predicate on the "schema" field.
func SchemaEqualFold(v string) predicate.Database {
	return predicate.Database(sql.FieldEqualFold(FieldSchema, v))
}

// SchemaContainsFold applies the ContainsFold predicate on the "schema" field.
func SchemaContainsFold(v string) predicate.Database {
	return predicate.Database(sql.FieldContainsFold(FieldSchema, v))
}

// RelationFigureEQ applies the EQ predicate on the "relation_figure" field.
func RelationFigureEQ(v string) predicate.Database {
	return predicate.Database(sql.FieldEQ(FieldRelationFigure, v))
}

// RelationFigureNEQ applies the NEQ predicate on the "relation_figure" field.
func RelationFigureNEQ(v string) predicate.Database {
	return predicate.Database(sql.FieldNEQ(FieldRelationFigure, v))
}

// RelationFigureIn applies the In predicate on the "relation_figure" field.
func RelationFigureIn(vs ...string) predicate.Database {
	return predicate.Database(sql.FieldIn(FieldRelationFigure, vs...))
}

// RelationFigureNotIn applies the NotIn predicate on the "relation_figure" field.
func RelationFigureNotIn(vs ...string) predicate.Database {
	return predicate.Database(sql.FieldNotIn(FieldRelationFigure, vs...))
}

// RelationFigureGT applies the GT predicate on the "relation_figure" field.
func RelationFigureGT(v string) predicate.Database {
	return predicate.Database(sql.FieldGT(FieldRelationFigure, v))
}

// RelationFigureGTE applies the GTE predicate on the "relation_figure" field.
func RelationFigureGTE(v string) predicate.Database {
	return predicate.Database(sql.FieldGTE(FieldRelationFigure, v))
}

// RelationFigureLT applies the LT predicate on the "relation_figure" field.
func RelationFigureLT(v string) predicate.Database {
	return predicate.Database(sql.FieldLT(FieldRelationFigure, v))
}

// RelationFigureLTE applies the LTE predicate on the "relation_figure" field.
func RelationFigureLTE(v string) predicate.Database {
	return predicate.Database(sql.FieldLTE(FieldRelationFigure, v))
}

// RelationFigureContains applies the Contains predicate on the "relation_figure" field.
func RelationFigureContains(v string) predicate.Database {
	return predicate.Database(sql.FieldContains(FieldRelationFigure, v))
}

// RelationFigureHasPrefix applies the HasPrefix predicate on the "relation_figure" field.
func RelationFigureHasPrefix(v string) predicate.Database {
	return predicate.Database(sql.FieldHasPrefix(FieldRelationFigure, v))
}

// RelationFigureHasSuffix applies the HasSuffix predicate on the "relation_figure" field.
func RelationFigureHasSuffix(v string) predicate.Database {
	return predicate.Database(sql.FieldHasSuffix(FieldRelationFigure, v))
}

// RelationFigureEqualFold applies the EqualFold predicate on the "relation_figure" field.
func RelationFigureEqualFold(v string) predicate.Database {
	return predicate.Database(sql.FieldEqualFold(FieldRelationFigure, v))
}

// RelationFigureContainsFold applies the ContainsFold predicate on the "relation_figure" field.
func RelationFigureContainsFold(v string) predicate.Database {
	return predicate.Database(sql.FieldContainsFold(FieldRelationFigure, v))
}

// HasQuestions applies the HasEdge predicate on the "questions" edge.
func HasQuestions() predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionsTable, QuestionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionsWith applies the HasEdge predicate on the "questions" edge with a given conditions (other predicates).
func HasQuestionsWith(preds ...predicate.Question) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		step := newQuestionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Database) predicate.Database {
	return predicate.Database(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Database) predicate.Database {
	return predicate.Database(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Database) predicate.Database {
	return predicate.Database(sql.NotPredicates(p))
}
