// Code generated by ent, DO NOT EDIT.

package database

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the database type in the database.
	Label = "database"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldRelationFigure holds the string denoting the relation_figure field in the database.
	FieldRelationFigure = "relation_figure"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSchema holds the string denoting the schema field in the database.
	FieldSchema = "schema"
	// EdgeQuestions holds the string denoting the questions edge name in mutations.
	EdgeQuestions = "questions"
	// Table holds the table name of the database in the database.
	Table = "databases"
	// QuestionsTable is the table that holds the questions relation/edge.
	QuestionsTable = "questions"
	// QuestionsInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionsInverseTable = "questions"
	// QuestionsColumn is the table column denoting the questions relation/edge.
	QuestionsColumn = "database_questions"
)

// Columns holds all SQL columns for database fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldRelationFigure,
	FieldDescription,
	FieldSchema,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// RelationFigureValidator is a validator for the "relation_figure" field. It is called by the builders before save.
	RelationFigureValidator func(string) error
	// SchemaValidator is a validator for the "schema" field. It is called by the builders before save.
	SchemaValidator func(string) error
)

// OrderOption defines the ordering options for the Database queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByRelationFigure orders the results by the relation_figure field.
func ByRelationFigure(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelationFigure, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// BySchema orders the results by the schema field.
func BySchema(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchema, opts...).ToFunc()
}

// ByQuestionsCount orders the results by questions count.
func ByQuestionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionsStep(), opts...)
	}
}

// ByQuestions orders the results by questions terms.
func ByQuestions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newQuestionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionsTable, QuestionsColumn),
	)
}
