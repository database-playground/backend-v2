// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/database-playground/backend-v2/ent/database"
	"github.com/database-playground/backend-v2/ent/question"
)

// Question is the model entity for the Question schema.
type Question struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Question category, e.g. 'query'
	Category string `json:"category,omitempty"`
	// Question difficulty, e.g. 'easy'
	Difficulty question.Difficulty `json:"difficulty,omitempty"`
	// Question title
	Title string `json:"title,omitempty"`
	// Question stem
	Description string `json:"description,omitempty"`
	// Reference answer
	ReferenceAnswer string `json:"reference_answer,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionQuery when eager-loading is set.
	Edges              QuestionEdges `json:"edges"`
	database_questions *int
	selectValues       sql.SelectValues
}

// QuestionEdges holds the relations/edges for other nodes in the graph.
type QuestionEdges struct {
	// Database holds the value of the database edge.
	Database *Database `json:"database,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// DatabaseOrErr returns the Database value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionEdges) DatabaseOrErr() (*Database, error) {
	if e.Database != nil {
		return e.Database, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: database.Label}
	}
	return nil, &NotLoadedError{edge: "database"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Question) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			values[i] = new(sql.NullInt64)
		case question.FieldCategory, question.FieldDifficulty, question.FieldTitle, question.FieldDescription, question.FieldReferenceAnswer:
			values[i] = new(sql.NullString)
		case question.ForeignKeys[0]: // database_questions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Question fields.
func (_m *Question) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case question.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				_m.Category = value.String
			}
		case question.FieldDifficulty:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty", values[i])
			} else if value.Valid {
				_m.Difficulty = question.Difficulty(value.String)
			}
		case question.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case question.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case question.FieldReferenceAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_answer", values[i])
			} else if value.Valid {
				_m.ReferenceAnswer = value.String
			}
		case question.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field database_questions", value)
			} else if value.Valid {
				_m.database_questions = new(int)
				*_m.database_questions = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Question.
// This includes values selected through modifiers, order, etc.
func (_m *Question) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDatabase queries the "database" edge of the Question entity.
func (_m *Question) QueryDatabase() *DatabaseQuery {
	return NewQuestionClient(_m.config).QueryDatabase(_m)
}

// Update returns a builder for updating this Question.
// Note that you need to call Question.Unwrap() before calling this method if this Question
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Question) Update() *QuestionUpdateOne {
	return NewQuestionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Question entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Question) Unwrap() *Question {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Question is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Question) String() string {
	var builder strings.Builder
	builder.WriteString("Question(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("category=")
	builder.WriteString(_m.Category)
	builder.WriteString(", ")
	builder.WriteString("difficulty=")
	builder.WriteString(fmt.Sprintf("%v", _m.Difficulty))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("reference_answer=")
	builder.WriteString(_m.ReferenceAnswer)
	builder.WriteByte(')')
	return builder.String()
}

// Questions is a parsable slice of Question.
type Questions []*Question
