// Code generated by ent, DO NOT EDIT.

package points

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/database-playground/backend-v2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Points {
	return predicate.Points(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Points {
	return predicate.Points(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Points {
	return predicate.Points(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Points {
	return predicate.Points(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Points {
	return predicate.Points(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Points {
	return predicate.Points(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Points {
	return predicate.Points(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Points {
	return predicate.Points(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Points {
	return predicate.Points(sql.FieldLTE(FieldID, id))
}

// Points applies equality check predicate on the "points" field. It's identical to PointsEQ.
func Points(v int) predicate.Points {
	return predicate.Points(sql.FieldEQ(FieldPoints, v))
}

// GrantedAt applies equality check predicate on the "granted_at" field. It's identical to GrantedAtEQ.
func GrantedAt(v time.Time) predicate.Points {
	return predicate.Points(sql.FieldEQ(FieldGrantedAt, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Points {
	return predicate.Points(sql.FieldEQ(FieldDescription, v))
}

// PointsEQ applies the EQ predicate on the "points" field.
func PointsEQ(v int) predicate.Points {
	return predicate.Points(sql.FieldEQ(FieldPoints, v))
}

// PointsNEQ applies the NEQ predicate on the "points" field.
func PointsNEQ(v int) predicate.Points {
	return predicate.Points(sql.FieldNEQ(FieldPoints, v))
}

// PointsIn applies the In predicate on the "points" field.
func PointsIn(vs ...int) predicate.Points {
	return predicate.Points(sql.FieldIn(FieldPoints, vs...))
}

// PointsNotIn applies the NotIn predicate on the "points" field.
func PointsNotIn(vs ...int) predicate.Points {
	return predicate.Points(sql.FieldNotIn(FieldPoints, vs...))
}

// PointsGT applies the GT predicate on the "points" field.
func PointsGT(v int) predicate.Points {
	return predicate.Points(sql.FieldGT(FieldPoints, v))
}

// PointsGTE applies the GTE predicate on the "points" field.
func PointsGTE(v int) predicate.Points {
	return predicate.Points(sql.FieldGTE(FieldPoints, v))
}

// PointsLT applies the LT predicate on the "points" field.
func PointsLT(v int) predicate.Points {
	return predicate.Points(sql.FieldLT(FieldPoints, v))
}

// PointsLTE applies the LTE predicate on the "points" field.
func PointsLTE(v int) predicate.Points {
	return predicate.Points(sql.FieldLTE(FieldPoints, v))
}

// GrantedAtEQ applies the EQ predicate on the "granted_at" field.
func GrantedAtEQ(v time.Time) predicate.Points {
	return predicate.Points(sql.FieldEQ(FieldGrantedAt, v))
}

// GrantedAtNEQ applies the NEQ predicate on the "granted_at" field.
func GrantedAtNEQ(v time.Time) predicate.Points {
	return predicate.Points(sql.FieldNEQ(FieldGrantedAt, v))
}

// GrantedAtIn applies the In predicate on the "granted_at" field.
func GrantedAtIn(vs ...time.Time) predicate.Points {
	return predicate.Points(sql.FieldIn(FieldGrantedAt, vs...))
}

// GrantedAtNotIn applies the NotIn predicate on the "granted_at" field.
func GrantedAtNotIn(vs ...time.Time) predicate.Points {
	return predicate.Points(sql.FieldNotIn(FieldGrantedAt, vs...))
}

// GrantedAtGT applies the GT predicate on the "granted_at" field.
func GrantedAtGT(v time.Time) predicate.Points {
	return predicate.Points(sql.FieldGT(FieldGrantedAt, v))
}

// GrantedAtGTE applies the GTE predicate on the "granted_at" field.
func GrantedAtGTE(v time.Time) predicate.Points {
	return predicate.Points(sql.FieldGTE(FieldGrantedAt, v))
}

// GrantedAtLT applies the LT predicate on the "granted_at" field.
func GrantedAtLT(v time.Time) predicate.Points {
	return predicate.Points(sql.FieldLT(FieldGrantedAt, v))
}

// GrantedAtLTE applies the LTE predicate on the "granted_at" field.
func GrantedAtLTE(v time.Time) predicate.Points {
	return predicate.Points(sql.FieldLTE(FieldGrantedAt, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Points {
	return predicate.Points(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Points {
	return predicate.Points(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Points {
	return predicate.Points(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Points {
	return predicate.Points(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Points {
	return predicate.Points(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Points {
	return predicate.Points(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Points {
	return predicate.Points(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Points {
	return predicate.Points(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Points {
	return predicate.Points(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Points {
	return predicate.Points(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Points {
	return predicate.Points(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Points {
	return predicate.Points(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Points {
	return predicate.Points(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Points {
	return predicate.Points(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Points {
	return predicate.Points(sql.FieldContainsFold(FieldDescription, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Points {
	return predicate.Points(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Points {
	return predicate.Points(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Points) predicate.Points {
	return predicate.Points(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Points) predicate.Points {
	return predicate.Points(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Points) predicate.Points {
	return predicate.Points(sql.NotPredicates(p))
}
