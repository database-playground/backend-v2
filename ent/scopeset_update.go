// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/database-playground/backend-v2/ent/group"
	"github.com/database-playground/backend-v2/ent/predicate"
	"github.com/database-playground/backend-v2/ent/scopeset"
)

// ScopeSetUpdate is the builder for updating ScopeSet entities.
type ScopeSetUpdate struct {
	config
	hooks    []Hook
	mutation *ScopeSetMutation
}

// Where appends a list predicates to the ScopeSetUpdate builder.
func (ssu *ScopeSetUpdate) Where(ps ...predicate.ScopeSet) *ScopeSetUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetDescription sets the "description" field.
func (ssu *ScopeSetUpdate) SetDescription(s string) *ScopeSetUpdate {
	ssu.mutation.SetDescription(s)
	return ssu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ssu *ScopeSetUpdate) SetNillableDescription(s *string) *ScopeSetUpdate {
	if s != nil {
		ssu.SetDescription(*s)
	}
	return ssu
}

// ClearDescription clears the value of the "description" field.
func (ssu *ScopeSetUpdate) ClearDescription() *ScopeSetUpdate {
	ssu.mutation.ClearDescription()
	return ssu
}

// SetScopes sets the "scopes" field.
func (ssu *ScopeSetUpdate) SetScopes(s []string) *ScopeSetUpdate {
	ssu.mutation.SetScopes(s)
	return ssu
}

// AppendScopes appends s to the "scopes" field.
func (ssu *ScopeSetUpdate) AppendScopes(s []string) *ScopeSetUpdate {
	ssu.mutation.AppendScopes(s)
	return ssu
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (ssu *ScopeSetUpdate) AddGroupIDs(ids ...int) *ScopeSetUpdate {
	ssu.mutation.AddGroupIDs(ids...)
	return ssu
}

// AddGroups adds the "groups" edges to the Group entity.
func (ssu *ScopeSetUpdate) AddGroups(g ...*Group) *ScopeSetUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ssu.AddGroupIDs(ids...)
}

// Mutation returns the ScopeSetMutation object of the builder.
func (ssu *ScopeSetUpdate) Mutation() *ScopeSetMutation {
	return ssu.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (ssu *ScopeSetUpdate) ClearGroups() *ScopeSetUpdate {
	ssu.mutation.ClearGroups()
	return ssu
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (ssu *ScopeSetUpdate) RemoveGroupIDs(ids ...int) *ScopeSetUpdate {
	ssu.mutation.RemoveGroupIDs(ids...)
	return ssu
}

// RemoveGroups removes "groups" edges to Group entities.
func (ssu *ScopeSetUpdate) RemoveGroups(g ...*Group) *ScopeSetUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ssu.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *ScopeSetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *ScopeSetUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *ScopeSetUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *ScopeSetUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ssu *ScopeSetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scopeset.Table, scopeset.Columns, sqlgraph.NewFieldSpec(scopeset.FieldID, field.TypeInt))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.Description(); ok {
		_spec.SetField(scopeset.FieldDescription, field.TypeString, value)
	}
	if ssu.mutation.DescriptionCleared() {
		_spec.ClearField(scopeset.FieldDescription, field.TypeString)
	}
	if value, ok := ssu.mutation.Scopes(); ok {
		_spec.SetField(scopeset.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := ssu.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scopeset.FieldScopes, value)
		})
	}
	if ssu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scopeset.GroupsTable,
			Columns: scopeset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !ssu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scopeset.GroupsTable,
			Columns: scopeset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scopeset.GroupsTable,
			Columns: scopeset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scopeset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// ScopeSetUpdateOne is the builder for updating a single ScopeSet entity.
type ScopeSetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScopeSetMutation
}

// SetDescription sets the "description" field.
func (ssuo *ScopeSetUpdateOne) SetDescription(s string) *ScopeSetUpdateOne {
	ssuo.mutation.SetDescription(s)
	return ssuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ssuo *ScopeSetUpdateOne) SetNillableDescription(s *string) *ScopeSetUpdateOne {
	if s != nil {
		ssuo.SetDescription(*s)
	}
	return ssuo
}

// ClearDescription clears the value of the "description" field.
func (ssuo *ScopeSetUpdateOne) ClearDescription() *ScopeSetUpdateOne {
	ssuo.mutation.ClearDescription()
	return ssuo
}

// SetScopes sets the "scopes" field.
func (ssuo *ScopeSetUpdateOne) SetScopes(s []string) *ScopeSetUpdateOne {
	ssuo.mutation.SetScopes(s)
	return ssuo
}

// AppendScopes appends s to the "scopes" field.
func (ssuo *ScopeSetUpdateOne) AppendScopes(s []string) *ScopeSetUpdateOne {
	ssuo.mutation.AppendScopes(s)
	return ssuo
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (ssuo *ScopeSetUpdateOne) AddGroupIDs(ids ...int) *ScopeSetUpdateOne {
	ssuo.mutation.AddGroupIDs(ids...)
	return ssuo
}

// AddGroups adds the "groups" edges to the Group entity.
func (ssuo *ScopeSetUpdateOne) AddGroups(g ...*Group) *ScopeSetUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ssuo.AddGroupIDs(ids...)
}

// Mutation returns the ScopeSetMutation object of the builder.
func (ssuo *ScopeSetUpdateOne) Mutation() *ScopeSetMutation {
	return ssuo.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (ssuo *ScopeSetUpdateOne) ClearGroups() *ScopeSetUpdateOne {
	ssuo.mutation.ClearGroups()
	return ssuo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (ssuo *ScopeSetUpdateOne) RemoveGroupIDs(ids ...int) *ScopeSetUpdateOne {
	ssuo.mutation.RemoveGroupIDs(ids...)
	return ssuo
}

// RemoveGroups removes "groups" edges to Group entities.
func (ssuo *ScopeSetUpdateOne) RemoveGroups(g ...*Group) *ScopeSetUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ssuo.RemoveGroupIDs(ids...)
}

// Where appends a list predicates to the ScopeSetUpdate builder.
func (ssuo *ScopeSetUpdateOne) Where(ps ...predicate.ScopeSet) *ScopeSetUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *ScopeSetUpdateOne) Select(field string, fields ...string) *ScopeSetUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated ScopeSet entity.
func (ssuo *ScopeSetUpdateOne) Save(ctx context.Context) (*ScopeSet, error) {
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *ScopeSetUpdateOne) SaveX(ctx context.Context) *ScopeSet {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *ScopeSetUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *ScopeSetUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ssuo *ScopeSetUpdateOne) sqlSave(ctx context.Context) (_node *ScopeSet, err error) {
	_spec := sqlgraph.NewUpdateSpec(scopeset.Table, scopeset.Columns, sqlgraph.NewFieldSpec(scopeset.FieldID, field.TypeInt))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScopeSet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scopeset.FieldID)
		for _, f := range fields {
			if !scopeset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scopeset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.Description(); ok {
		_spec.SetField(scopeset.FieldDescription, field.TypeString, value)
	}
	if ssuo.mutation.DescriptionCleared() {
		_spec.ClearField(scopeset.FieldDescription, field.TypeString)
	}
	if value, ok := ssuo.mutation.Scopes(); ok {
		_spec.SetField(scopeset.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := ssuo.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scopeset.FieldScopes, value)
		})
	}
	if ssuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scopeset.GroupsTable,
			Columns: scopeset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !ssuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scopeset.GroupsTable,
			Columns: scopeset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scopeset.GroupsTable,
			Columns: scopeset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScopeSet{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scopeset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
