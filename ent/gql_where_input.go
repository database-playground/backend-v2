// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/database-playground/backend-v2/ent/database"
	"github.com/database-playground/backend-v2/ent/events"
	"github.com/database-playground/backend-v2/ent/group"
	"github.com/database-playground/backend-v2/ent/points"
	"github.com/database-playground/backend-v2/ent/predicate"
	"github.com/database-playground/backend-v2/ent/question"
	"github.com/database-playground/backend-v2/ent/scopeset"
	"github.com/database-playground/backend-v2/ent/submission"
	"github.com/database-playground/backend-v2/ent/user"
)

// DatabaseWhereInput represents a where input for filtering Database queries.
type DatabaseWhereInput struct {
	Predicates []predicate.Database  `json:"-"`
	Not        *DatabaseWhereInput   `json:"not,omitempty"`
	Or         []*DatabaseWhereInput `json:"or,omitempty"`
	And        []*DatabaseWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "slug" field predicates.
	Slug             *string  `json:"slug,omitempty"`
	SlugNEQ          *string  `json:"slugNEQ,omitempty"`
	SlugIn           []string `json:"slugIn,omitempty"`
	SlugNotIn        []string `json:"slugNotIn,omitempty"`
	SlugGT           *string  `json:"slugGT,omitempty"`
	SlugGTE          *string  `json:"slugGTE,omitempty"`
	SlugLT           *string  `json:"slugLT,omitempty"`
	SlugLTE          *string  `json:"slugLTE,omitempty"`
	SlugContains     *string  `json:"slugContains,omitempty"`
	SlugHasPrefix    *string  `json:"slugHasPrefix,omitempty"`
	SlugHasSuffix    *string  `json:"slugHasSuffix,omitempty"`
	SlugEqualFold    *string  `json:"slugEqualFold,omitempty"`
	SlugContainsFold *string  `json:"slugContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "schema" field predicates.
	Schema             *string  `json:"schema,omitempty"`
	SchemaNEQ          *string  `json:"schemaNEQ,omitempty"`
	SchemaIn           []string `json:"schemaIn,omitempty"`
	SchemaNotIn        []string `json:"schemaNotIn,omitempty"`
	SchemaGT           *string  `json:"schemaGT,omitempty"`
	SchemaGTE          *string  `json:"schemaGTE,omitempty"`
	SchemaLT           *string  `json:"schemaLT,omitempty"`
	SchemaLTE          *string  `json:"schemaLTE,omitempty"`
	SchemaContains     *string  `json:"schemaContains,omitempty"`
	SchemaHasPrefix    *string  `json:"schemaHasPrefix,omitempty"`
	SchemaHasSuffix    *string  `json:"schemaHasSuffix,omitempty"`
	SchemaEqualFold    *string  `json:"schemaEqualFold,omitempty"`
	SchemaContainsFold *string  `json:"schemaContainsFold,omitempty"`

	// "relation_figure" field predicates.
	RelationFigure             *string  `json:"relationFigure,omitempty"`
	RelationFigureNEQ          *string  `json:"relationFigureNEQ,omitempty"`
	RelationFigureIn           []string `json:"relationFigureIn,omitempty"`
	RelationFigureNotIn        []string `json:"relationFigureNotIn,omitempty"`
	RelationFigureGT           *string  `json:"relationFigureGT,omitempty"`
	RelationFigureGTE          *string  `json:"relationFigureGTE,omitempty"`
	RelationFigureLT           *string  `json:"relationFigureLT,omitempty"`
	RelationFigureLTE          *string  `json:"relationFigureLTE,omitempty"`
	RelationFigureContains     *string  `json:"relationFigureContains,omitempty"`
	RelationFigureHasPrefix    *string  `json:"relationFigureHasPrefix,omitempty"`
	RelationFigureHasSuffix    *string  `json:"relationFigureHasSuffix,omitempty"`
	RelationFigureEqualFold    *string  `json:"relationFigureEqualFold,omitempty"`
	RelationFigureContainsFold *string  `json:"relationFigureContainsFold,omitempty"`

	// "questions" edge predicates.
	HasQuestions     *bool                 `json:"hasQuestions,omitempty"`
	HasQuestionsWith []*QuestionWhereInput `json:"hasQuestionsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *DatabaseWhereInput) AddPredicates(predicates ...predicate.Database) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the DatabaseWhereInput filter on the DatabaseQuery builder.
func (i *DatabaseWhereInput) Filter(q *DatabaseQuery) (*DatabaseQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyDatabaseWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyDatabaseWhereInput is returned in case the DatabaseWhereInput is empty.
var ErrEmptyDatabaseWhereInput = errors.New("ent: empty predicate DatabaseWhereInput")

// P returns a predicate for filtering databases.
// An error is returned if the input is empty or invalid.
func (i *DatabaseWhereInput) P() (predicate.Database, error) {
	var predicates []predicate.Database
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, database.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Database, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, database.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Database, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, database.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, database.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, database.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, database.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, database.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, database.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, database.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, database.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, database.IDLTE(*i.IDLTE))
	}
	if i.Slug != nil {
		predicates = append(predicates, database.SlugEQ(*i.Slug))
	}
	if i.SlugNEQ != nil {
		predicates = append(predicates, database.SlugNEQ(*i.SlugNEQ))
	}
	if len(i.SlugIn) > 0 {
		predicates = append(predicates, database.SlugIn(i.SlugIn...))
	}
	if len(i.SlugNotIn) > 0 {
		predicates = append(predicates, database.SlugNotIn(i.SlugNotIn...))
	}
	if i.SlugGT != nil {
		predicates = append(predicates, database.SlugGT(*i.SlugGT))
	}
	if i.SlugGTE != nil {
		predicates = append(predicates, database.SlugGTE(*i.SlugGTE))
	}
	if i.SlugLT != nil {
		predicates = append(predicates, database.SlugLT(*i.SlugLT))
	}
	if i.SlugLTE != nil {
		predicates = append(predicates, database.SlugLTE(*i.SlugLTE))
	}
	if i.SlugContains != nil {
		predicates = append(predicates, database.SlugContains(*i.SlugContains))
	}
	if i.SlugHasPrefix != nil {
		predicates = append(predicates, database.SlugHasPrefix(*i.SlugHasPrefix))
	}
	if i.SlugHasSuffix != nil {
		predicates = append(predicates, database.SlugHasSuffix(*i.SlugHasSuffix))
	}
	if i.SlugEqualFold != nil {
		predicates = append(predicates, database.SlugEqualFold(*i.SlugEqualFold))
	}
	if i.SlugContainsFold != nil {
		predicates = append(predicates, database.SlugContainsFold(*i.SlugContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, database.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, database.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, database.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, database.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, database.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, database.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, database.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, database.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, database.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, database.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, database.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, database.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, database.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, database.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, database.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.Schema != nil {
		predicates = append(predicates, database.SchemaEQ(*i.Schema))
	}
	if i.SchemaNEQ != nil {
		predicates = append(predicates, database.SchemaNEQ(*i.SchemaNEQ))
	}
	if len(i.SchemaIn) > 0 {
		predicates = append(predicates, database.SchemaIn(i.SchemaIn...))
	}
	if len(i.SchemaNotIn) > 0 {
		predicates = append(predicates, database.SchemaNotIn(i.SchemaNotIn...))
	}
	if i.SchemaGT != nil {
		predicates = append(predicates, database.SchemaGT(*i.SchemaGT))
	}
	if i.SchemaGTE != nil {
		predicates = append(predicates, database.SchemaGTE(*i.SchemaGTE))
	}
	if i.SchemaLT != nil {
		predicates = append(predicates, database.SchemaLT(*i.SchemaLT))
	}
	if i.SchemaLTE != nil {
		predicates = append(predicates, database.SchemaLTE(*i.SchemaLTE))
	}
	if i.SchemaContains != nil {
		predicates = append(predicates, database.SchemaContains(*i.SchemaContains))
	}
	if i.SchemaHasPrefix != nil {
		predicates = append(predicates, database.SchemaHasPrefix(*i.SchemaHasPrefix))
	}
	if i.SchemaHasSuffix != nil {
		predicates = append(predicates, database.SchemaHasSuffix(*i.SchemaHasSuffix))
	}
	if i.SchemaEqualFold != nil {
		predicates = append(predicates, database.SchemaEqualFold(*i.SchemaEqualFold))
	}
	if i.SchemaContainsFold != nil {
		predicates = append(predicates, database.SchemaContainsFold(*i.SchemaContainsFold))
	}
	if i.RelationFigure != nil {
		predicates = append(predicates, database.RelationFigureEQ(*i.RelationFigure))
	}
	if i.RelationFigureNEQ != nil {
		predicates = append(predicates, database.RelationFigureNEQ(*i.RelationFigureNEQ))
	}
	if len(i.RelationFigureIn) > 0 {
		predicates = append(predicates, database.RelationFigureIn(i.RelationFigureIn...))
	}
	if len(i.RelationFigureNotIn) > 0 {
		predicates = append(predicates, database.RelationFigureNotIn(i.RelationFigureNotIn...))
	}
	if i.RelationFigureGT != nil {
		predicates = append(predicates, database.RelationFigureGT(*i.RelationFigureGT))
	}
	if i.RelationFigureGTE != nil {
		predicates = append(predicates, database.RelationFigureGTE(*i.RelationFigureGTE))
	}
	if i.RelationFigureLT != nil {
		predicates = append(predicates, database.RelationFigureLT(*i.RelationFigureLT))
	}
	if i.RelationFigureLTE != nil {
		predicates = append(predicates, database.RelationFigureLTE(*i.RelationFigureLTE))
	}
	if i.RelationFigureContains != nil {
		predicates = append(predicates, database.RelationFigureContains(*i.RelationFigureContains))
	}
	if i.RelationFigureHasPrefix != nil {
		predicates = append(predicates, database.RelationFigureHasPrefix(*i.RelationFigureHasPrefix))
	}
	if i.RelationFigureHasSuffix != nil {
		predicates = append(predicates, database.RelationFigureHasSuffix(*i.RelationFigureHasSuffix))
	}
	if i.RelationFigureEqualFold != nil {
		predicates = append(predicates, database.RelationFigureEqualFold(*i.RelationFigureEqualFold))
	}
	if i.RelationFigureContainsFold != nil {
		predicates = append(predicates, database.RelationFigureContainsFold(*i.RelationFigureContainsFold))
	}

	if i.HasQuestions != nil {
		p := database.HasQuestions()
		if !*i.HasQuestions {
			p = database.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasQuestionsWith) > 0 {
		with := make([]predicate.Question, 0, len(i.HasQuestionsWith))
		for _, w := range i.HasQuestionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasQuestionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, database.HasQuestionsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyDatabaseWhereInput
	case 1:
		return predicates[0], nil
	default:
		return database.And(predicates...), nil
	}
}

// EventsWhereInput represents a where input for filtering Events queries.
type EventsWhereInput struct {
	Predicates []predicate.Events  `json:"-"`
	Not        *EventsWhereInput   `json:"not,omitempty"`
	Or         []*EventsWhereInput `json:"or,omitempty"`
	And        []*EventsWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "user_id" field predicates.
	UserID      *int  `json:"userID,omitempty"`
	UserIDNEQ   *int  `json:"userIDNEQ,omitempty"`
	UserIDIn    []int `json:"userIDIn,omitempty"`
	UserIDNotIn []int `json:"userIDNotIn,omitempty"`

	// "type" field predicates.
	Type             *string  `json:"type,omitempty"`
	TypeNEQ          *string  `json:"typeNEQ,omitempty"`
	TypeIn           []string `json:"typeIn,omitempty"`
	TypeNotIn        []string `json:"typeNotIn,omitempty"`
	TypeGT           *string  `json:"typeGT,omitempty"`
	TypeGTE          *string  `json:"typeGTE,omitempty"`
	TypeLT           *string  `json:"typeLT,omitempty"`
	TypeLTE          *string  `json:"typeLTE,omitempty"`
	TypeContains     *string  `json:"typeContains,omitempty"`
	TypeHasPrefix    *string  `json:"typeHasPrefix,omitempty"`
	TypeHasSuffix    *string  `json:"typeHasSuffix,omitempty"`
	TypeEqualFold    *string  `json:"typeEqualFold,omitempty"`
	TypeContainsFold *string  `json:"typeContainsFold,omitempty"`

	// "triggered_at" field predicates.
	TriggeredAt      *time.Time  `json:"triggeredAt,omitempty"`
	TriggeredAtNEQ   *time.Time  `json:"triggeredAtNEQ,omitempty"`
	TriggeredAtIn    []time.Time `json:"triggeredAtIn,omitempty"`
	TriggeredAtNotIn []time.Time `json:"triggeredAtNotIn,omitempty"`
	TriggeredAtGT    *time.Time  `json:"triggeredAtGT,omitempty"`
	TriggeredAtGTE   *time.Time  `json:"triggeredAtGTE,omitempty"`
	TriggeredAtLT    *time.Time  `json:"triggeredAtLT,omitempty"`
	TriggeredAtLTE   *time.Time  `json:"triggeredAtLTE,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EventsWhereInput) AddPredicates(predicates ...predicate.Events) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EventsWhereInput filter on the EventsQuery builder.
func (i *EventsWhereInput) Filter(q *EventsQuery) (*EventsQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEventsWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEventsWhereInput is returned in case the EventsWhereInput is empty.
var ErrEmptyEventsWhereInput = errors.New("ent: empty predicate EventsWhereInput")

// P returns a predicate for filtering eventsslice.
// An error is returned if the input is empty or invalid.
func (i *EventsWhereInput) P() (predicate.Events, error) {
	var predicates []predicate.Events
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, events.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Events, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, events.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Events, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, events.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, events.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, events.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, events.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, events.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, events.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, events.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, events.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, events.IDLTE(*i.IDLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, events.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, events.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, events.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, events.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.Type != nil {
		predicates = append(predicates, events.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, events.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, events.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, events.TypeNotIn(i.TypeNotIn...))
	}
	if i.TypeGT != nil {
		predicates = append(predicates, events.TypeGT(*i.TypeGT))
	}
	if i.TypeGTE != nil {
		predicates = append(predicates, events.TypeGTE(*i.TypeGTE))
	}
	if i.TypeLT != nil {
		predicates = append(predicates, events.TypeLT(*i.TypeLT))
	}
	if i.TypeLTE != nil {
		predicates = append(predicates, events.TypeLTE(*i.TypeLTE))
	}
	if i.TypeContains != nil {
		predicates = append(predicates, events.TypeContains(*i.TypeContains))
	}
	if i.TypeHasPrefix != nil {
		predicates = append(predicates, events.TypeHasPrefix(*i.TypeHasPrefix))
	}
	if i.TypeHasSuffix != nil {
		predicates = append(predicates, events.TypeHasSuffix(*i.TypeHasSuffix))
	}
	if i.TypeEqualFold != nil {
		predicates = append(predicates, events.TypeEqualFold(*i.TypeEqualFold))
	}
	if i.TypeContainsFold != nil {
		predicates = append(predicates, events.TypeContainsFold(*i.TypeContainsFold))
	}
	if i.TriggeredAt != nil {
		predicates = append(predicates, events.TriggeredAtEQ(*i.TriggeredAt))
	}
	if i.TriggeredAtNEQ != nil {
		predicates = append(predicates, events.TriggeredAtNEQ(*i.TriggeredAtNEQ))
	}
	if len(i.TriggeredAtIn) > 0 {
		predicates = append(predicates, events.TriggeredAtIn(i.TriggeredAtIn...))
	}
	if len(i.TriggeredAtNotIn) > 0 {
		predicates = append(predicates, events.TriggeredAtNotIn(i.TriggeredAtNotIn...))
	}
	if i.TriggeredAtGT != nil {
		predicates = append(predicates, events.TriggeredAtGT(*i.TriggeredAtGT))
	}
	if i.TriggeredAtGTE != nil {
		predicates = append(predicates, events.TriggeredAtGTE(*i.TriggeredAtGTE))
	}
	if i.TriggeredAtLT != nil {
		predicates = append(predicates, events.TriggeredAtLT(*i.TriggeredAtLT))
	}
	if i.TriggeredAtLTE != nil {
		predicates = append(predicates, events.TriggeredAtLTE(*i.TriggeredAtLTE))
	}

	if i.HasUser != nil {
		p := events.HasUser()
		if !*i.HasUser {
			p = events.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, events.HasUserWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEventsWhereInput
	case 1:
		return predicates[0], nil
	default:
		return events.And(predicates...), nil
	}
}

// GroupWhereInput represents a where input for filtering Group queries.
type GroupWhereInput struct {
	Predicates []predicate.Group  `json:"-"`
	Not        *GroupWhereInput   `json:"not,omitempty"`
	Or         []*GroupWhereInput `json:"or,omitempty"`
	And        []*GroupWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "scope_sets" edge predicates.
	HasScopeSets     *bool                 `json:"hasScopeSets,omitempty"`
	HasScopeSetsWith []*ScopeSetWhereInput `json:"hasScopeSetsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GroupWhereInput) AddPredicates(predicates ...predicate.Group) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GroupWhereInput filter on the GroupQuery builder.
func (i *GroupWhereInput) Filter(q *GroupQuery) (*GroupQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGroupWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGroupWhereInput is returned in case the GroupWhereInput is empty.
var ErrEmptyGroupWhereInput = errors.New("ent: empty predicate GroupWhereInput")

// P returns a predicate for filtering groups.
// An error is returned if the input is empty or invalid.
func (i *GroupWhereInput) P() (predicate.Group, error) {
	var predicates []predicate.Group
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, group.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Group, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, group.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Group, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, group.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, group.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, group.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, group.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, group.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, group.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, group.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, group.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, group.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, group.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, group.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, group.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, group.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, group.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, group.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, group.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, group.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, group.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, group.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, group.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, group.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, group.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, group.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, group.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, group.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, group.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, group.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, group.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, group.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, group.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, group.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, group.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, group.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, group.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, group.DeletedAtNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, group.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, group.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, group.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, group.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, group.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, group.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, group.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, group.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, group.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, group.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, group.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, group.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, group.NameContainsFold(*i.NameContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, group.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, group.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, group.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, group.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, group.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, group.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, group.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, group.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, group.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, group.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, group.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, group.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, group.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, group.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, group.DescriptionContainsFold(*i.DescriptionContainsFold))
	}

	if i.HasScopeSets != nil {
		p := group.HasScopeSets()
		if !*i.HasScopeSets {
			p = group.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasScopeSetsWith) > 0 {
		with := make([]predicate.ScopeSet, 0, len(i.HasScopeSetsWith))
		for _, w := range i.HasScopeSetsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasScopeSetsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, group.HasScopeSetsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGroupWhereInput
	case 1:
		return predicates[0], nil
	default:
		return group.And(predicates...), nil
	}
}

// PointsWhereInput represents a where input for filtering Points queries.
type PointsWhereInput struct {
	Predicates []predicate.Points  `json:"-"`
	Not        *PointsWhereInput   `json:"not,omitempty"`
	Or         []*PointsWhereInput `json:"or,omitempty"`
	And        []*PointsWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "points" field predicates.
	Points      *int  `json:"points,omitempty"`
	PointsNEQ   *int  `json:"pointsNEQ,omitempty"`
	PointsIn    []int `json:"pointsIn,omitempty"`
	PointsNotIn []int `json:"pointsNotIn,omitempty"`
	PointsGT    *int  `json:"pointsGT,omitempty"`
	PointsGTE   *int  `json:"pointsGTE,omitempty"`
	PointsLT    *int  `json:"pointsLT,omitempty"`
	PointsLTE   *int  `json:"pointsLTE,omitempty"`

	// "granted_at" field predicates.
	GrantedAt      *time.Time  `json:"grantedAt,omitempty"`
	GrantedAtNEQ   *time.Time  `json:"grantedAtNEQ,omitempty"`
	GrantedAtIn    []time.Time `json:"grantedAtIn,omitempty"`
	GrantedAtNotIn []time.Time `json:"grantedAtNotIn,omitempty"`
	GrantedAtGT    *time.Time  `json:"grantedAtGT,omitempty"`
	GrantedAtGTE   *time.Time  `json:"grantedAtGTE,omitempty"`
	GrantedAtLT    *time.Time  `json:"grantedAtLT,omitempty"`
	GrantedAtLTE   *time.Time  `json:"grantedAtLTE,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PointsWhereInput) AddPredicates(predicates ...predicate.Points) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PointsWhereInput filter on the PointsQuery builder.
func (i *PointsWhereInput) Filter(q *PointsQuery) (*PointsQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPointsWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPointsWhereInput is returned in case the PointsWhereInput is empty.
var ErrEmptyPointsWhereInput = errors.New("ent: empty predicate PointsWhereInput")

// P returns a predicate for filtering pointsslice.
// An error is returned if the input is empty or invalid.
func (i *PointsWhereInput) P() (predicate.Points, error) {
	var predicates []predicate.Points
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, points.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Points, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, points.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Points, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, points.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, points.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, points.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, points.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, points.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, points.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, points.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, points.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, points.IDLTE(*i.IDLTE))
	}
	if i.Points != nil {
		predicates = append(predicates, points.PointsEQ(*i.Points))
	}
	if i.PointsNEQ != nil {
		predicates = append(predicates, points.PointsNEQ(*i.PointsNEQ))
	}
	if len(i.PointsIn) > 0 {
		predicates = append(predicates, points.PointsIn(i.PointsIn...))
	}
	if len(i.PointsNotIn) > 0 {
		predicates = append(predicates, points.PointsNotIn(i.PointsNotIn...))
	}
	if i.PointsGT != nil {
		predicates = append(predicates, points.PointsGT(*i.PointsGT))
	}
	if i.PointsGTE != nil {
		predicates = append(predicates, points.PointsGTE(*i.PointsGTE))
	}
	if i.PointsLT != nil {
		predicates = append(predicates, points.PointsLT(*i.PointsLT))
	}
	if i.PointsLTE != nil {
		predicates = append(predicates, points.PointsLTE(*i.PointsLTE))
	}
	if i.GrantedAt != nil {
		predicates = append(predicates, points.GrantedAtEQ(*i.GrantedAt))
	}
	if i.GrantedAtNEQ != nil {
		predicates = append(predicates, points.GrantedAtNEQ(*i.GrantedAtNEQ))
	}
	if len(i.GrantedAtIn) > 0 {
		predicates = append(predicates, points.GrantedAtIn(i.GrantedAtIn...))
	}
	if len(i.GrantedAtNotIn) > 0 {
		predicates = append(predicates, points.GrantedAtNotIn(i.GrantedAtNotIn...))
	}
	if i.GrantedAtGT != nil {
		predicates = append(predicates, points.GrantedAtGT(*i.GrantedAtGT))
	}
	if i.GrantedAtGTE != nil {
		predicates = append(predicates, points.GrantedAtGTE(*i.GrantedAtGTE))
	}
	if i.GrantedAtLT != nil {
		predicates = append(predicates, points.GrantedAtLT(*i.GrantedAtLT))
	}
	if i.GrantedAtLTE != nil {
		predicates = append(predicates, points.GrantedAtLTE(*i.GrantedAtLTE))
	}
	if i.Description != nil {
		predicates = append(predicates, points.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, points.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, points.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, points.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, points.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, points.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, points.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, points.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, points.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, points.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, points.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, points.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, points.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, points.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, points.DescriptionContainsFold(*i.DescriptionContainsFold))
	}

	if i.HasUser != nil {
		p := points.HasUser()
		if !*i.HasUser {
			p = points.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, points.HasUserWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPointsWhereInput
	case 1:
		return predicates[0], nil
	default:
		return points.And(predicates...), nil
	}
}

// QuestionWhereInput represents a where input for filtering Question queries.
type QuestionWhereInput struct {
	Predicates []predicate.Question  `json:"-"`
	Not        *QuestionWhereInput   `json:"not,omitempty"`
	Or         []*QuestionWhereInput `json:"or,omitempty"`
	And        []*QuestionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "category" field predicates.
	Category             *string  `json:"category,omitempty"`
	CategoryNEQ          *string  `json:"categoryNEQ,omitempty"`
	CategoryIn           []string `json:"categoryIn,omitempty"`
	CategoryNotIn        []string `json:"categoryNotIn,omitempty"`
	CategoryGT           *string  `json:"categoryGT,omitempty"`
	CategoryGTE          *string  `json:"categoryGTE,omitempty"`
	CategoryLT           *string  `json:"categoryLT,omitempty"`
	CategoryLTE          *string  `json:"categoryLTE,omitempty"`
	CategoryContains     *string  `json:"categoryContains,omitempty"`
	CategoryHasPrefix    *string  `json:"categoryHasPrefix,omitempty"`
	CategoryHasSuffix    *string  `json:"categoryHasSuffix,omitempty"`
	CategoryEqualFold    *string  `json:"categoryEqualFold,omitempty"`
	CategoryContainsFold *string  `json:"categoryContainsFold,omitempty"`

	// "difficulty" field predicates.
	Difficulty      *question.Difficulty  `json:"difficulty,omitempty"`
	DifficultyNEQ   *question.Difficulty  `json:"difficultyNEQ,omitempty"`
	DifficultyIn    []question.Difficulty `json:"difficultyIn,omitempty"`
	DifficultyNotIn []question.Difficulty `json:"difficultyNotIn,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "reference_answer" field predicates.
	ReferenceAnswer             *string  `json:"referenceAnswer,omitempty"`
	ReferenceAnswerNEQ          *string  `json:"referenceAnswerNEQ,omitempty"`
	ReferenceAnswerIn           []string `json:"referenceAnswerIn,omitempty"`
	ReferenceAnswerNotIn        []string `json:"referenceAnswerNotIn,omitempty"`
	ReferenceAnswerGT           *string  `json:"referenceAnswerGT,omitempty"`
	ReferenceAnswerGTE          *string  `json:"referenceAnswerGTE,omitempty"`
	ReferenceAnswerLT           *string  `json:"referenceAnswerLT,omitempty"`
	ReferenceAnswerLTE          *string  `json:"referenceAnswerLTE,omitempty"`
	ReferenceAnswerContains     *string  `json:"referenceAnswerContains,omitempty"`
	ReferenceAnswerHasPrefix    *string  `json:"referenceAnswerHasPrefix,omitempty"`
	ReferenceAnswerHasSuffix    *string  `json:"referenceAnswerHasSuffix,omitempty"`
	ReferenceAnswerEqualFold    *string  `json:"referenceAnswerEqualFold,omitempty"`
	ReferenceAnswerContainsFold *string  `json:"referenceAnswerContainsFold,omitempty"`

	// "database" edge predicates.
	HasDatabase     *bool                 `json:"hasDatabase,omitempty"`
	HasDatabaseWith []*DatabaseWhereInput `json:"hasDatabaseWith,omitempty"`

	// "submissions" edge predicates.
	HasSubmissions     *bool                   `json:"hasSubmissions,omitempty"`
	HasSubmissionsWith []*SubmissionWhereInput `json:"hasSubmissionsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *QuestionWhereInput) AddPredicates(predicates ...predicate.Question) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the QuestionWhereInput filter on the QuestionQuery builder.
func (i *QuestionWhereInput) Filter(q *QuestionQuery) (*QuestionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyQuestionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyQuestionWhereInput is returned in case the QuestionWhereInput is empty.
var ErrEmptyQuestionWhereInput = errors.New("ent: empty predicate QuestionWhereInput")

// P returns a predicate for filtering questions.
// An error is returned if the input is empty or invalid.
func (i *QuestionWhereInput) P() (predicate.Question, error) {
	var predicates []predicate.Question
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, question.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Question, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, question.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Question, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, question.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, question.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, question.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, question.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, question.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, question.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, question.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, question.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, question.IDLTE(*i.IDLTE))
	}
	if i.Category != nil {
		predicates = append(predicates, question.CategoryEQ(*i.Category))
	}
	if i.CategoryNEQ != nil {
		predicates = append(predicates, question.CategoryNEQ(*i.CategoryNEQ))
	}
	if len(i.CategoryIn) > 0 {
		predicates = append(predicates, question.CategoryIn(i.CategoryIn...))
	}
	if len(i.CategoryNotIn) > 0 {
		predicates = append(predicates, question.CategoryNotIn(i.CategoryNotIn...))
	}
	if i.CategoryGT != nil {
		predicates = append(predicates, question.CategoryGT(*i.CategoryGT))
	}
	if i.CategoryGTE != nil {
		predicates = append(predicates, question.CategoryGTE(*i.CategoryGTE))
	}
	if i.CategoryLT != nil {
		predicates = append(predicates, question.CategoryLT(*i.CategoryLT))
	}
	if i.CategoryLTE != nil {
		predicates = append(predicates, question.CategoryLTE(*i.CategoryLTE))
	}
	if i.CategoryContains != nil {
		predicates = append(predicates, question.CategoryContains(*i.CategoryContains))
	}
	if i.CategoryHasPrefix != nil {
		predicates = append(predicates, question.CategoryHasPrefix(*i.CategoryHasPrefix))
	}
	if i.CategoryHasSuffix != nil {
		predicates = append(predicates, question.CategoryHasSuffix(*i.CategoryHasSuffix))
	}
	if i.CategoryEqualFold != nil {
		predicates = append(predicates, question.CategoryEqualFold(*i.CategoryEqualFold))
	}
	if i.CategoryContainsFold != nil {
		predicates = append(predicates, question.CategoryContainsFold(*i.CategoryContainsFold))
	}
	if i.Difficulty != nil {
		predicates = append(predicates, question.DifficultyEQ(*i.Difficulty))
	}
	if i.DifficultyNEQ != nil {
		predicates = append(predicates, question.DifficultyNEQ(*i.DifficultyNEQ))
	}
	if len(i.DifficultyIn) > 0 {
		predicates = append(predicates, question.DifficultyIn(i.DifficultyIn...))
	}
	if len(i.DifficultyNotIn) > 0 {
		predicates = append(predicates, question.DifficultyNotIn(i.DifficultyNotIn...))
	}
	if i.Title != nil {
		predicates = append(predicates, question.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, question.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, question.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, question.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, question.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, question.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, question.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, question.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, question.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, question.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, question.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, question.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, question.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, question.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, question.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, question.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, question.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, question.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, question.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, question.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, question.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, question.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, question.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, question.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, question.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, question.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.ReferenceAnswer != nil {
		predicates = append(predicates, question.ReferenceAnswerEQ(*i.ReferenceAnswer))
	}
	if i.ReferenceAnswerNEQ != nil {
		predicates = append(predicates, question.ReferenceAnswerNEQ(*i.ReferenceAnswerNEQ))
	}
	if len(i.ReferenceAnswerIn) > 0 {
		predicates = append(predicates, question.ReferenceAnswerIn(i.ReferenceAnswerIn...))
	}
	if len(i.ReferenceAnswerNotIn) > 0 {
		predicates = append(predicates, question.ReferenceAnswerNotIn(i.ReferenceAnswerNotIn...))
	}
	if i.ReferenceAnswerGT != nil {
		predicates = append(predicates, question.ReferenceAnswerGT(*i.ReferenceAnswerGT))
	}
	if i.ReferenceAnswerGTE != nil {
		predicates = append(predicates, question.ReferenceAnswerGTE(*i.ReferenceAnswerGTE))
	}
	if i.ReferenceAnswerLT != nil {
		predicates = append(predicates, question.ReferenceAnswerLT(*i.ReferenceAnswerLT))
	}
	if i.ReferenceAnswerLTE != nil {
		predicates = append(predicates, question.ReferenceAnswerLTE(*i.ReferenceAnswerLTE))
	}
	if i.ReferenceAnswerContains != nil {
		predicates = append(predicates, question.ReferenceAnswerContains(*i.ReferenceAnswerContains))
	}
	if i.ReferenceAnswerHasPrefix != nil {
		predicates = append(predicates, question.ReferenceAnswerHasPrefix(*i.ReferenceAnswerHasPrefix))
	}
	if i.ReferenceAnswerHasSuffix != nil {
		predicates = append(predicates, question.ReferenceAnswerHasSuffix(*i.ReferenceAnswerHasSuffix))
	}
	if i.ReferenceAnswerEqualFold != nil {
		predicates = append(predicates, question.ReferenceAnswerEqualFold(*i.ReferenceAnswerEqualFold))
	}
	if i.ReferenceAnswerContainsFold != nil {
		predicates = append(predicates, question.ReferenceAnswerContainsFold(*i.ReferenceAnswerContainsFold))
	}

	if i.HasDatabase != nil {
		p := question.HasDatabase()
		if !*i.HasDatabase {
			p = question.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDatabaseWith) > 0 {
		with := make([]predicate.Database, 0, len(i.HasDatabaseWith))
		for _, w := range i.HasDatabaseWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDatabaseWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, question.HasDatabaseWith(with...))
	}
	if i.HasSubmissions != nil {
		p := question.HasSubmissions()
		if !*i.HasSubmissions {
			p = question.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSubmissionsWith) > 0 {
		with := make([]predicate.Submission, 0, len(i.HasSubmissionsWith))
		for _, w := range i.HasSubmissionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSubmissionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, question.HasSubmissionsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyQuestionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return question.And(predicates...), nil
	}
}

// ScopeSetWhereInput represents a where input for filtering ScopeSet queries.
type ScopeSetWhereInput struct {
	Predicates []predicate.ScopeSet  `json:"-"`
	Not        *ScopeSetWhereInput   `json:"not,omitempty"`
	Or         []*ScopeSetWhereInput `json:"or,omitempty"`
	And        []*ScopeSetWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "slug" field predicates.
	Slug             *string  `json:"slug,omitempty"`
	SlugNEQ          *string  `json:"slugNEQ,omitempty"`
	SlugIn           []string `json:"slugIn,omitempty"`
	SlugNotIn        []string `json:"slugNotIn,omitempty"`
	SlugGT           *string  `json:"slugGT,omitempty"`
	SlugGTE          *string  `json:"slugGTE,omitempty"`
	SlugLT           *string  `json:"slugLT,omitempty"`
	SlugLTE          *string  `json:"slugLTE,omitempty"`
	SlugContains     *string  `json:"slugContains,omitempty"`
	SlugHasPrefix    *string  `json:"slugHasPrefix,omitempty"`
	SlugHasSuffix    *string  `json:"slugHasSuffix,omitempty"`
	SlugEqualFold    *string  `json:"slugEqualFold,omitempty"`
	SlugContainsFold *string  `json:"slugContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "groups" edge predicates.
	HasGroups     *bool              `json:"hasGroups,omitempty"`
	HasGroupsWith []*GroupWhereInput `json:"hasGroupsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ScopeSetWhereInput) AddPredicates(predicates ...predicate.ScopeSet) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ScopeSetWhereInput filter on the ScopeSetQuery builder.
func (i *ScopeSetWhereInput) Filter(q *ScopeSetQuery) (*ScopeSetQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyScopeSetWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyScopeSetWhereInput is returned in case the ScopeSetWhereInput is empty.
var ErrEmptyScopeSetWhereInput = errors.New("ent: empty predicate ScopeSetWhereInput")

// P returns a predicate for filtering scopesets.
// An error is returned if the input is empty or invalid.
func (i *ScopeSetWhereInput) P() (predicate.ScopeSet, error) {
	var predicates []predicate.ScopeSet
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, scopeset.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ScopeSet, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, scopeset.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ScopeSet, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, scopeset.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, scopeset.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, scopeset.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, scopeset.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, scopeset.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, scopeset.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, scopeset.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, scopeset.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, scopeset.IDLTE(*i.IDLTE))
	}
	if i.Slug != nil {
		predicates = append(predicates, scopeset.SlugEQ(*i.Slug))
	}
	if i.SlugNEQ != nil {
		predicates = append(predicates, scopeset.SlugNEQ(*i.SlugNEQ))
	}
	if len(i.SlugIn) > 0 {
		predicates = append(predicates, scopeset.SlugIn(i.SlugIn...))
	}
	if len(i.SlugNotIn) > 0 {
		predicates = append(predicates, scopeset.SlugNotIn(i.SlugNotIn...))
	}
	if i.SlugGT != nil {
		predicates = append(predicates, scopeset.SlugGT(*i.SlugGT))
	}
	if i.SlugGTE != nil {
		predicates = append(predicates, scopeset.SlugGTE(*i.SlugGTE))
	}
	if i.SlugLT != nil {
		predicates = append(predicates, scopeset.SlugLT(*i.SlugLT))
	}
	if i.SlugLTE != nil {
		predicates = append(predicates, scopeset.SlugLTE(*i.SlugLTE))
	}
	if i.SlugContains != nil {
		predicates = append(predicates, scopeset.SlugContains(*i.SlugContains))
	}
	if i.SlugHasPrefix != nil {
		predicates = append(predicates, scopeset.SlugHasPrefix(*i.SlugHasPrefix))
	}
	if i.SlugHasSuffix != nil {
		predicates = append(predicates, scopeset.SlugHasSuffix(*i.SlugHasSuffix))
	}
	if i.SlugEqualFold != nil {
		predicates = append(predicates, scopeset.SlugEqualFold(*i.SlugEqualFold))
	}
	if i.SlugContainsFold != nil {
		predicates = append(predicates, scopeset.SlugContainsFold(*i.SlugContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, scopeset.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, scopeset.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, scopeset.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, scopeset.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, scopeset.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, scopeset.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, scopeset.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, scopeset.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, scopeset.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, scopeset.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, scopeset.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, scopeset.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, scopeset.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, scopeset.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, scopeset.DescriptionContainsFold(*i.DescriptionContainsFold))
	}

	if i.HasGroups != nil {
		p := scopeset.HasGroups()
		if !*i.HasGroups {
			p = scopeset.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupsWith) > 0 {
		with := make([]predicate.Group, 0, len(i.HasGroupsWith))
		for _, w := range i.HasGroupsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, scopeset.HasGroupsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyScopeSetWhereInput
	case 1:
		return predicates[0], nil
	default:
		return scopeset.And(predicates...), nil
	}
}

// SubmissionWhereInput represents a where input for filtering Submission queries.
type SubmissionWhereInput struct {
	Predicates []predicate.Submission  `json:"-"`
	Not        *SubmissionWhereInput   `json:"not,omitempty"`
	Or         []*SubmissionWhereInput `json:"or,omitempty"`
	And        []*SubmissionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "submitted_code" field predicates.
	SubmittedCode             *string  `json:"submittedCode,omitempty"`
	SubmittedCodeNEQ          *string  `json:"submittedCodeNEQ,omitempty"`
	SubmittedCodeIn           []string `json:"submittedCodeIn,omitempty"`
	SubmittedCodeNotIn        []string `json:"submittedCodeNotIn,omitempty"`
	SubmittedCodeGT           *string  `json:"submittedCodeGT,omitempty"`
	SubmittedCodeGTE          *string  `json:"submittedCodeGTE,omitempty"`
	SubmittedCodeLT           *string  `json:"submittedCodeLT,omitempty"`
	SubmittedCodeLTE          *string  `json:"submittedCodeLTE,omitempty"`
	SubmittedCodeContains     *string  `json:"submittedCodeContains,omitempty"`
	SubmittedCodeHasPrefix    *string  `json:"submittedCodeHasPrefix,omitempty"`
	SubmittedCodeHasSuffix    *string  `json:"submittedCodeHasSuffix,omitempty"`
	SubmittedCodeEqualFold    *string  `json:"submittedCodeEqualFold,omitempty"`
	SubmittedCodeContainsFold *string  `json:"submittedCodeContainsFold,omitempty"`

	// "status" field predicates.
	Status      *submission.Status  `json:"status,omitempty"`
	StatusNEQ   *submission.Status  `json:"statusNEQ,omitempty"`
	StatusIn    []submission.Status `json:"statusIn,omitempty"`
	StatusNotIn []submission.Status `json:"statusNotIn,omitempty"`

	// "error" field predicates.
	Error             *string  `json:"error,omitempty"`
	ErrorNEQ          *string  `json:"errorNEQ,omitempty"`
	ErrorIn           []string `json:"errorIn,omitempty"`
	ErrorNotIn        []string `json:"errorNotIn,omitempty"`
	ErrorGT           *string  `json:"errorGT,omitempty"`
	ErrorGTE          *string  `json:"errorGTE,omitempty"`
	ErrorLT           *string  `json:"errorLT,omitempty"`
	ErrorLTE          *string  `json:"errorLTE,omitempty"`
	ErrorContains     *string  `json:"errorContains,omitempty"`
	ErrorHasPrefix    *string  `json:"errorHasPrefix,omitempty"`
	ErrorHasSuffix    *string  `json:"errorHasSuffix,omitempty"`
	ErrorIsNil        bool     `json:"errorIsNil,omitempty"`
	ErrorNotNil       bool     `json:"errorNotNil,omitempty"`
	ErrorEqualFold    *string  `json:"errorEqualFold,omitempty"`
	ErrorContainsFold *string  `json:"errorContainsFold,omitempty"`

	// "submitted_at" field predicates.
	SubmittedAt      *time.Time  `json:"submittedAt,omitempty"`
	SubmittedAtNEQ   *time.Time  `json:"submittedAtNEQ,omitempty"`
	SubmittedAtIn    []time.Time `json:"submittedAtIn,omitempty"`
	SubmittedAtNotIn []time.Time `json:"submittedAtNotIn,omitempty"`
	SubmittedAtGT    *time.Time  `json:"submittedAtGT,omitempty"`
	SubmittedAtGTE   *time.Time  `json:"submittedAtGTE,omitempty"`
	SubmittedAtLT    *time.Time  `json:"submittedAtLT,omitempty"`
	SubmittedAtLTE   *time.Time  `json:"submittedAtLTE,omitempty"`

	// "question" edge predicates.
	HasQuestion     *bool                 `json:"hasQuestion,omitempty"`
	HasQuestionWith []*QuestionWhereInput `json:"hasQuestionWith,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *SubmissionWhereInput) AddPredicates(predicates ...predicate.Submission) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the SubmissionWhereInput filter on the SubmissionQuery builder.
func (i *SubmissionWhereInput) Filter(q *SubmissionQuery) (*SubmissionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptySubmissionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptySubmissionWhereInput is returned in case the SubmissionWhereInput is empty.
var ErrEmptySubmissionWhereInput = errors.New("ent: empty predicate SubmissionWhereInput")

// P returns a predicate for filtering submissions.
// An error is returned if the input is empty or invalid.
func (i *SubmissionWhereInput) P() (predicate.Submission, error) {
	var predicates []predicate.Submission
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, submission.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Submission, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, submission.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Submission, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, submission.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, submission.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, submission.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, submission.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, submission.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, submission.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, submission.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, submission.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, submission.IDLTE(*i.IDLTE))
	}
	if i.SubmittedCode != nil {
		predicates = append(predicates, submission.SubmittedCodeEQ(*i.SubmittedCode))
	}
	if i.SubmittedCodeNEQ != nil {
		predicates = append(predicates, submission.SubmittedCodeNEQ(*i.SubmittedCodeNEQ))
	}
	if len(i.SubmittedCodeIn) > 0 {
		predicates = append(predicates, submission.SubmittedCodeIn(i.SubmittedCodeIn...))
	}
	if len(i.SubmittedCodeNotIn) > 0 {
		predicates = append(predicates, submission.SubmittedCodeNotIn(i.SubmittedCodeNotIn...))
	}
	if i.SubmittedCodeGT != nil {
		predicates = append(predicates, submission.SubmittedCodeGT(*i.SubmittedCodeGT))
	}
	if i.SubmittedCodeGTE != nil {
		predicates = append(predicates, submission.SubmittedCodeGTE(*i.SubmittedCodeGTE))
	}
	if i.SubmittedCodeLT != nil {
		predicates = append(predicates, submission.SubmittedCodeLT(*i.SubmittedCodeLT))
	}
	if i.SubmittedCodeLTE != nil {
		predicates = append(predicates, submission.SubmittedCodeLTE(*i.SubmittedCodeLTE))
	}
	if i.SubmittedCodeContains != nil {
		predicates = append(predicates, submission.SubmittedCodeContains(*i.SubmittedCodeContains))
	}
	if i.SubmittedCodeHasPrefix != nil {
		predicates = append(predicates, submission.SubmittedCodeHasPrefix(*i.SubmittedCodeHasPrefix))
	}
	if i.SubmittedCodeHasSuffix != nil {
		predicates = append(predicates, submission.SubmittedCodeHasSuffix(*i.SubmittedCodeHasSuffix))
	}
	if i.SubmittedCodeEqualFold != nil {
		predicates = append(predicates, submission.SubmittedCodeEqualFold(*i.SubmittedCodeEqualFold))
	}
	if i.SubmittedCodeContainsFold != nil {
		predicates = append(predicates, submission.SubmittedCodeContainsFold(*i.SubmittedCodeContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, submission.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, submission.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, submission.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, submission.StatusNotIn(i.StatusNotIn...))
	}
	if i.Error != nil {
		predicates = append(predicates, submission.ErrorEQ(*i.Error))
	}
	if i.ErrorNEQ != nil {
		predicates = append(predicates, submission.ErrorNEQ(*i.ErrorNEQ))
	}
	if len(i.ErrorIn) > 0 {
		predicates = append(predicates, submission.ErrorIn(i.ErrorIn...))
	}
	if len(i.ErrorNotIn) > 0 {
		predicates = append(predicates, submission.ErrorNotIn(i.ErrorNotIn...))
	}
	if i.ErrorGT != nil {
		predicates = append(predicates, submission.ErrorGT(*i.ErrorGT))
	}
	if i.ErrorGTE != nil {
		predicates = append(predicates, submission.ErrorGTE(*i.ErrorGTE))
	}
	if i.ErrorLT != nil {
		predicates = append(predicates, submission.ErrorLT(*i.ErrorLT))
	}
	if i.ErrorLTE != nil {
		predicates = append(predicates, submission.ErrorLTE(*i.ErrorLTE))
	}
	if i.ErrorContains != nil {
		predicates = append(predicates, submission.ErrorContains(*i.ErrorContains))
	}
	if i.ErrorHasPrefix != nil {
		predicates = append(predicates, submission.ErrorHasPrefix(*i.ErrorHasPrefix))
	}
	if i.ErrorHasSuffix != nil {
		predicates = append(predicates, submission.ErrorHasSuffix(*i.ErrorHasSuffix))
	}
	if i.ErrorIsNil {
		predicates = append(predicates, submission.ErrorIsNil())
	}
	if i.ErrorNotNil {
		predicates = append(predicates, submission.ErrorNotNil())
	}
	if i.ErrorEqualFold != nil {
		predicates = append(predicates, submission.ErrorEqualFold(*i.ErrorEqualFold))
	}
	if i.ErrorContainsFold != nil {
		predicates = append(predicates, submission.ErrorContainsFold(*i.ErrorContainsFold))
	}
	if i.SubmittedAt != nil {
		predicates = append(predicates, submission.SubmittedAtEQ(*i.SubmittedAt))
	}
	if i.SubmittedAtNEQ != nil {
		predicates = append(predicates, submission.SubmittedAtNEQ(*i.SubmittedAtNEQ))
	}
	if len(i.SubmittedAtIn) > 0 {
		predicates = append(predicates, submission.SubmittedAtIn(i.SubmittedAtIn...))
	}
	if len(i.SubmittedAtNotIn) > 0 {
		predicates = append(predicates, submission.SubmittedAtNotIn(i.SubmittedAtNotIn...))
	}
	if i.SubmittedAtGT != nil {
		predicates = append(predicates, submission.SubmittedAtGT(*i.SubmittedAtGT))
	}
	if i.SubmittedAtGTE != nil {
		predicates = append(predicates, submission.SubmittedAtGTE(*i.SubmittedAtGTE))
	}
	if i.SubmittedAtLT != nil {
		predicates = append(predicates, submission.SubmittedAtLT(*i.SubmittedAtLT))
	}
	if i.SubmittedAtLTE != nil {
		predicates = append(predicates, submission.SubmittedAtLTE(*i.SubmittedAtLTE))
	}

	if i.HasQuestion != nil {
		p := submission.HasQuestion()
		if !*i.HasQuestion {
			p = submission.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasQuestionWith) > 0 {
		with := make([]predicate.Question, 0, len(i.HasQuestionWith))
		for _, w := range i.HasQuestionWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasQuestionWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, submission.HasQuestionWith(with...))
	}
	if i.HasUser != nil {
		p := submission.HasUser()
		if !*i.HasUser {
			p = submission.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, submission.HasUserWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptySubmissionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return submission.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "avatar" field predicates.
	Avatar             *string  `json:"avatar,omitempty"`
	AvatarNEQ          *string  `json:"avatarNEQ,omitempty"`
	AvatarIn           []string `json:"avatarIn,omitempty"`
	AvatarNotIn        []string `json:"avatarNotIn,omitempty"`
	AvatarGT           *string  `json:"avatarGT,omitempty"`
	AvatarGTE          *string  `json:"avatarGTE,omitempty"`
	AvatarLT           *string  `json:"avatarLT,omitempty"`
	AvatarLTE          *string  `json:"avatarLTE,omitempty"`
	AvatarContains     *string  `json:"avatarContains,omitempty"`
	AvatarHasPrefix    *string  `json:"avatarHasPrefix,omitempty"`
	AvatarHasSuffix    *string  `json:"avatarHasSuffix,omitempty"`
	AvatarIsNil        bool     `json:"avatarIsNil,omitempty"`
	AvatarNotNil       bool     `json:"avatarNotNil,omitempty"`
	AvatarEqualFold    *string  `json:"avatarEqualFold,omitempty"`
	AvatarContainsFold *string  `json:"avatarContainsFold,omitempty"`

	// "group" edge predicates.
	HasGroup     *bool              `json:"hasGroup,omitempty"`
	HasGroupWith []*GroupWhereInput `json:"hasGroupWith,omitempty"`

	// "points" edge predicates.
	HasPoints     *bool               `json:"hasPoints,omitempty"`
	HasPointsWith []*PointsWhereInput `json:"hasPointsWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool               `json:"hasEvents,omitempty"`
	HasEventsWith []*EventsWhereInput `json:"hasEventsWith,omitempty"`

	// "submissions" edge predicates.
	HasSubmissions     *bool                   `json:"hasSubmissions,omitempty"`
	HasSubmissionsWith []*SubmissionWhereInput `json:"hasSubmissionsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, user.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, user.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, user.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, user.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, user.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, user.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, user.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, user.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, user.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, user.DeletedAtNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Avatar != nil {
		predicates = append(predicates, user.AvatarEQ(*i.Avatar))
	}
	if i.AvatarNEQ != nil {
		predicates = append(predicates, user.AvatarNEQ(*i.AvatarNEQ))
	}
	if len(i.AvatarIn) > 0 {
		predicates = append(predicates, user.AvatarIn(i.AvatarIn...))
	}
	if len(i.AvatarNotIn) > 0 {
		predicates = append(predicates, user.AvatarNotIn(i.AvatarNotIn...))
	}
	if i.AvatarGT != nil {
		predicates = append(predicates, user.AvatarGT(*i.AvatarGT))
	}
	if i.AvatarGTE != nil {
		predicates = append(predicates, user.AvatarGTE(*i.AvatarGTE))
	}
	if i.AvatarLT != nil {
		predicates = append(predicates, user.AvatarLT(*i.AvatarLT))
	}
	if i.AvatarLTE != nil {
		predicates = append(predicates, user.AvatarLTE(*i.AvatarLTE))
	}
	if i.AvatarContains != nil {
		predicates = append(predicates, user.AvatarContains(*i.AvatarContains))
	}
	if i.AvatarHasPrefix != nil {
		predicates = append(predicates, user.AvatarHasPrefix(*i.AvatarHasPrefix))
	}
	if i.AvatarHasSuffix != nil {
		predicates = append(predicates, user.AvatarHasSuffix(*i.AvatarHasSuffix))
	}
	if i.AvatarIsNil {
		predicates = append(predicates, user.AvatarIsNil())
	}
	if i.AvatarNotNil {
		predicates = append(predicates, user.AvatarNotNil())
	}
	if i.AvatarEqualFold != nil {
		predicates = append(predicates, user.AvatarEqualFold(*i.AvatarEqualFold))
	}
	if i.AvatarContainsFold != nil {
		predicates = append(predicates, user.AvatarContainsFold(*i.AvatarContainsFold))
	}

	if i.HasGroup != nil {
		p := user.HasGroup()
		if !*i.HasGroup {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupWith) > 0 {
		with := make([]predicate.Group, 0, len(i.HasGroupWith))
		for _, w := range i.HasGroupWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasGroupWith(with...))
	}
	if i.HasPoints != nil {
		p := user.HasPoints()
		if !*i.HasPoints {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPointsWith) > 0 {
		with := make([]predicate.Points, 0, len(i.HasPointsWith))
		for _, w := range i.HasPointsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPointsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasPointsWith(with...))
	}
	if i.HasEvents != nil {
		p := user.HasEvents()
		if !*i.HasEvents {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Events, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasEventsWith(with...))
	}
	if i.HasSubmissions != nil {
		p := user.HasSubmissions()
		if !*i.HasSubmissions {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSubmissionsWith) > 0 {
		with := make([]predicate.Submission, 0, len(i.HasSubmissionsWith))
		for _, w := range i.HasSubmissionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSubmissionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasSubmissionsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
