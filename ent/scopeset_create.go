// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/database-playground/backend-v2/ent/group"
	"github.com/database-playground/backend-v2/ent/scopeset"
)

// ScopeSetCreate is the builder for creating a ScopeSet entity.
type ScopeSetCreate struct {
	config
	mutation *ScopeSetMutation
	hooks    []Hook
}

// SetSlug sets the "slug" field.
func (ssc *ScopeSetCreate) SetSlug(s string) *ScopeSetCreate {
	ssc.mutation.SetSlug(s)
	return ssc
}

// SetDescription sets the "description" field.
func (ssc *ScopeSetCreate) SetDescription(s string) *ScopeSetCreate {
	ssc.mutation.SetDescription(s)
	return ssc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ssc *ScopeSetCreate) SetNillableDescription(s *string) *ScopeSetCreate {
	if s != nil {
		ssc.SetDescription(*s)
	}
	return ssc
}

// SetScopes sets the "scopes" field.
func (ssc *ScopeSetCreate) SetScopes(s []string) *ScopeSetCreate {
	ssc.mutation.SetScopes(s)
	return ssc
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (ssc *ScopeSetCreate) AddGroupIDs(ids ...int) *ScopeSetCreate {
	ssc.mutation.AddGroupIDs(ids...)
	return ssc
}

// AddGroups adds the "groups" edges to the Group entity.
func (ssc *ScopeSetCreate) AddGroups(g ...*Group) *ScopeSetCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ssc.AddGroupIDs(ids...)
}

// Mutation returns the ScopeSetMutation object of the builder.
func (ssc *ScopeSetCreate) Mutation() *ScopeSetMutation {
	return ssc.mutation
}

// Save creates the ScopeSet in the database.
func (ssc *ScopeSetCreate) Save(ctx context.Context) (*ScopeSet, error) {
	ssc.defaults()
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *ScopeSetCreate) SaveX(ctx context.Context) *ScopeSet {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *ScopeSetCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *ScopeSetCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *ScopeSetCreate) defaults() {
	if _, ok := ssc.mutation.Scopes(); !ok {
		v := scopeset.DefaultScopes
		ssc.mutation.SetScopes(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *ScopeSetCreate) check() error {
	if _, ok := ssc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "ScopeSet.slug"`)}
	}
	if v, ok := ssc.mutation.Slug(); ok {
		if err := scopeset.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "ScopeSet.slug": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.Scopes(); !ok {
		return &ValidationError{Name: "scopes", err: errors.New(`ent: missing required field "ScopeSet.scopes"`)}
	}
	return nil
}

func (ssc *ScopeSetCreate) sqlSave(ctx context.Context) (*ScopeSet, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *ScopeSetCreate) createSpec() (*ScopeSet, *sqlgraph.CreateSpec) {
	var (
		_node = &ScopeSet{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(scopeset.Table, sqlgraph.NewFieldSpec(scopeset.FieldID, field.TypeInt))
	)
	if value, ok := ssc.mutation.Slug(); ok {
		_spec.SetField(scopeset.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := ssc.mutation.Description(); ok {
		_spec.SetField(scopeset.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ssc.mutation.Scopes(); ok {
		_spec.SetField(scopeset.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if nodes := ssc.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scopeset.GroupsTable,
			Columns: scopeset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScopeSetCreateBulk is the builder for creating many ScopeSet entities in bulk.
type ScopeSetCreateBulk struct {
	config
	err      error
	builders []*ScopeSetCreate
}

// Save creates the ScopeSet entities in the database.
func (sscb *ScopeSetCreateBulk) Save(ctx context.Context) ([]*ScopeSet, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*ScopeSet, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScopeSetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *ScopeSetCreateBulk) SaveX(ctx context.Context) []*ScopeSet {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *ScopeSetCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *ScopeSetCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}
