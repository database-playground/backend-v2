// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/database-playground/backend-v2/ent/database"
	"github.com/database-playground/backend-v2/ent/predicate"
	"github.com/database-playground/backend-v2/ent/question"
)

// DatabaseUpdate is the builder for updating Database entities.
type DatabaseUpdate struct {
	config
	hooks    []Hook
	mutation *DatabaseMutation
}

// Where appends a list predicates to the DatabaseUpdate builder.
func (_u *DatabaseUpdate) Where(ps ...predicate.Database) *DatabaseUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetDescription sets the "description" field.
func (_u *DatabaseUpdate) SetDescription(v string) *DatabaseUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DatabaseUpdate) SetNillableDescription(v *string) *DatabaseUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DatabaseUpdate) ClearDescription() *DatabaseUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetSchema sets the "schema" field.
func (_u *DatabaseUpdate) SetSchema(v string) *DatabaseUpdate {
	_u.mutation.SetSchema(v)
	return _u
}

// SetNillableSchema sets the "schema" field if the given value is not nil.
func (_u *DatabaseUpdate) SetNillableSchema(v *string) *DatabaseUpdate {
	if v != nil {
		_u.SetSchema(*v)
	}
	return _u
}

// SetRelationFigure sets the "relation_figure" field.
func (_u *DatabaseUpdate) SetRelationFigure(v string) *DatabaseUpdate {
	_u.mutation.SetRelationFigure(v)
	return _u
}

// SetNillableRelationFigure sets the "relation_figure" field if the given value is not nil.
func (_u *DatabaseUpdate) SetNillableRelationFigure(v *string) *DatabaseUpdate {
	if v != nil {
		_u.SetRelationFigure(*v)
	}
	return _u
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (_u *DatabaseUpdate) AddQuestionIDs(ids ...int) *DatabaseUpdate {
	_u.mutation.AddQuestionIDs(ids...)
	return _u
}

// AddQuestions adds the "questions" edges to the Question entity.
func (_u *DatabaseUpdate) AddQuestions(v ...*Question) *DatabaseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuestionIDs(ids...)
}

// Mutation returns the DatabaseMutation object of the builder.
func (_u *DatabaseUpdate) Mutation() *DatabaseMutation {
	return _u.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (_u *DatabaseUpdate) ClearQuestions() *DatabaseUpdate {
	_u.mutation.ClearQuestions()
	return _u
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (_u *DatabaseUpdate) RemoveQuestionIDs(ids ...int) *DatabaseUpdate {
	_u.mutation.RemoveQuestionIDs(ids...)
	return _u
}

// RemoveQuestions removes "questions" edges to Question entities.
func (_u *DatabaseUpdate) RemoveQuestions(v ...*Question) *DatabaseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DatabaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DatabaseUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DatabaseUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DatabaseUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DatabaseUpdate) check() error {
	if v, ok := _u.mutation.Schema(); ok {
		if err := database.SchemaValidator(v); err != nil {
			return &ValidationError{Name: "schema", err: fmt.Errorf(`ent: validator failed for field "Database.schema": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RelationFigure(); ok {
		if err := database.RelationFigureValidator(v); err != nil {
			return &ValidationError{Name: "relation_figure", err: fmt.Errorf(`ent: validator failed for field "Database.relation_figure": %w`, err)}
		}
	}
	return nil
}

func (_u *DatabaseUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(database.Table, database.Columns, sqlgraph.NewFieldSpec(database.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(database.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(database.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Schema(); ok {
		_spec.SetField(database.FieldSchema, field.TypeString, value)
	}
	if value, ok := _u.mutation.RelationFigure(); ok {
		_spec.SetField(database.FieldRelationFigure, field.TypeString, value)
	}
	if _u.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.QuestionsTable,
			Columns: []string{database.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !_u.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.QuestionsTable,
			Columns: []string{database.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.QuestionsTable,
			Columns: []string{database.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{database.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DatabaseUpdateOne is the builder for updating a single Database entity.
type DatabaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DatabaseMutation
}

// SetDescription sets the "description" field.
func (_u *DatabaseUpdateOne) SetDescription(v string) *DatabaseUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DatabaseUpdateOne) SetNillableDescription(v *string) *DatabaseUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DatabaseUpdateOne) ClearDescription() *DatabaseUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetSchema sets the "schema" field.
func (_u *DatabaseUpdateOne) SetSchema(v string) *DatabaseUpdateOne {
	_u.mutation.SetSchema(v)
	return _u
}

// SetNillableSchema sets the "schema" field if the given value is not nil.
func (_u *DatabaseUpdateOne) SetNillableSchema(v *string) *DatabaseUpdateOne {
	if v != nil {
		_u.SetSchema(*v)
	}
	return _u
}

// SetRelationFigure sets the "relation_figure" field.
func (_u *DatabaseUpdateOne) SetRelationFigure(v string) *DatabaseUpdateOne {
	_u.mutation.SetRelationFigure(v)
	return _u
}

// SetNillableRelationFigure sets the "relation_figure" field if the given value is not nil.
func (_u *DatabaseUpdateOne) SetNillableRelationFigure(v *string) *DatabaseUpdateOne {
	if v != nil {
		_u.SetRelationFigure(*v)
	}
	return _u
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (_u *DatabaseUpdateOne) AddQuestionIDs(ids ...int) *DatabaseUpdateOne {
	_u.mutation.AddQuestionIDs(ids...)
	return _u
}

// AddQuestions adds the "questions" edges to the Question entity.
func (_u *DatabaseUpdateOne) AddQuestions(v ...*Question) *DatabaseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuestionIDs(ids...)
}

// Mutation returns the DatabaseMutation object of the builder.
func (_u *DatabaseUpdateOne) Mutation() *DatabaseMutation {
	return _u.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (_u *DatabaseUpdateOne) ClearQuestions() *DatabaseUpdateOne {
	_u.mutation.ClearQuestions()
	return _u
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (_u *DatabaseUpdateOne) RemoveQuestionIDs(ids ...int) *DatabaseUpdateOne {
	_u.mutation.RemoveQuestionIDs(ids...)
	return _u
}

// RemoveQuestions removes "questions" edges to Question entities.
func (_u *DatabaseUpdateOne) RemoveQuestions(v ...*Question) *DatabaseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuestionIDs(ids...)
}

// Where appends a list predicates to the DatabaseUpdate builder.
func (_u *DatabaseUpdateOne) Where(ps ...predicate.Database) *DatabaseUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DatabaseUpdateOne) Select(field string, fields ...string) *DatabaseUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Database entity.
func (_u *DatabaseUpdateOne) Save(ctx context.Context) (*Database, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DatabaseUpdateOne) SaveX(ctx context.Context) *Database {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DatabaseUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DatabaseUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DatabaseUpdateOne) check() error {
	if v, ok := _u.mutation.Schema(); ok {
		if err := database.SchemaValidator(v); err != nil {
			return &ValidationError{Name: "schema", err: fmt.Errorf(`ent: validator failed for field "Database.schema": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RelationFigure(); ok {
		if err := database.RelationFigureValidator(v); err != nil {
			return &ValidationError{Name: "relation_figure", err: fmt.Errorf(`ent: validator failed for field "Database.relation_figure": %w`, err)}
		}
	}
	return nil
}

func (_u *DatabaseUpdateOne) sqlSave(ctx context.Context) (_node *Database, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(database.Table, database.Columns, sqlgraph.NewFieldSpec(database.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Database.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, database.FieldID)
		for _, f := range fields {
			if !database.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != database.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(database.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(database.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Schema(); ok {
		_spec.SetField(database.FieldSchema, field.TypeString, value)
	}
	if value, ok := _u.mutation.RelationFigure(); ok {
		_spec.SetField(database.FieldRelationFigure, field.TypeString, value)
	}
	if _u.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.QuestionsTable,
			Columns: []string{database.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !_u.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.QuestionsTable,
			Columns: []string{database.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.QuestionsTable,
			Columns: []string{database.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Database{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{database.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
