// Code generated by ent, DO NOT EDIT.

package scopeset

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the scopeset type in the database.
	Label = "scope_set"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldScopes holds the string denoting the scopes field in the database.
	FieldScopes = "scopes"
	// Table holds the table name of the scopeset in the database.
	Table = "scope_sets"
)

// Columns holds all SQL columns for scopeset fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldDescription,
	FieldScopes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "scope_sets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"group_scope_set",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// DefaultScopes holds the default value on creation for the "scopes" field.
	DefaultScopes []string
)

// OrderOption defines the ordering options for the ScopeSet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}
