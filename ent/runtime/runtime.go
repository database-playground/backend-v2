// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"time"

	"github.com/database-playground/backend-v2/ent/database"
	"github.com/database-playground/backend-v2/ent/events"
	"github.com/database-playground/backend-v2/ent/group"
	"github.com/database-playground/backend-v2/ent/points"
	"github.com/database-playground/backend-v2/ent/question"
	"github.com/database-playground/backend-v2/ent/schema"
	"github.com/database-playground/backend-v2/ent/scopeset"
	"github.com/database-playground/backend-v2/ent/submission"
	"github.com/database-playground/backend-v2/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	databaseFields := schema.Database{}.Fields()
	_ = databaseFields
	// databaseDescSlug is the schema descriptor for slug field.
	databaseDescSlug := databaseFields[0].Descriptor()
	// database.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	database.SlugValidator = databaseDescSlug.Validators[0].(func(string) error)
	// databaseDescSchema is the schema descriptor for schema field.
	databaseDescSchema := databaseFields[2].Descriptor()
	// database.SchemaValidator is a validator for the "schema" field. It is called by the builders before save.
	database.SchemaValidator = databaseDescSchema.Validators[0].(func(string) error)
	// databaseDescRelationFigure is the schema descriptor for relation_figure field.
	databaseDescRelationFigure := databaseFields[3].Descriptor()
	// database.RelationFigureValidator is a validator for the "relation_figure" field. It is called by the builders before save.
	database.RelationFigureValidator = databaseDescRelationFigure.Validators[0].(func(string) error)
	eventsFields := schema.Events{}.Fields()
	_ = eventsFields
	// eventsDescType is the schema descriptor for type field.
	eventsDescType := eventsFields[1].Descriptor()
	// events.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	events.TypeValidator = eventsDescType.Validators[0].(func(string) error)
	// eventsDescTriggeredAt is the schema descriptor for triggered_at field.
	eventsDescTriggeredAt := eventsFields[2].Descriptor()
	// events.DefaultTriggeredAt holds the default value on creation for the triggered_at field.
	events.DefaultTriggeredAt = eventsDescTriggeredAt.Default.(func() time.Time)
	groupMixin := schema.Group{}.Mixin()
	groupMixinHooks0 := groupMixin[0].Hooks()
	group.Hooks[0] = groupMixinHooks0[0]
	groupMixinInters0 := groupMixin[0].Interceptors()
	group.Interceptors[0] = groupMixinInters0[0]
	groupMixinFields0 := groupMixin[0].Fields()
	_ = groupMixinFields0
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescCreatedAt is the schema descriptor for created_at field.
	groupDescCreatedAt := groupMixinFields0[0].Descriptor()
	// group.DefaultCreatedAt holds the default value on creation for the created_at field.
	group.DefaultCreatedAt = groupDescCreatedAt.Default.(func() time.Time)
	// groupDescUpdatedAt is the schema descriptor for updated_at field.
	groupDescUpdatedAt := groupMixinFields0[1].Descriptor()
	// group.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	group.DefaultUpdatedAt = groupDescUpdatedAt.Default.(func() time.Time)
	// group.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	group.UpdateDefaultUpdatedAt = groupDescUpdatedAt.UpdateDefault.(func() time.Time)
	// groupDescName is the schema descriptor for name field.
	groupDescName := groupFields[0].Descriptor()
	// group.NameValidator is a validator for the "name" field. It is called by the builders before save.
	group.NameValidator = groupDescName.Validators[0].(func(string) error)
	pointsFields := schema.Points{}.Fields()
	_ = pointsFields
	// pointsDescPoints is the schema descriptor for points field.
	pointsDescPoints := pointsFields[0].Descriptor()
	// points.DefaultPoints holds the default value on creation for the points field.
	points.DefaultPoints = pointsDescPoints.Default.(int)
	// pointsDescGrantedAt is the schema descriptor for granted_at field.
	pointsDescGrantedAt := pointsFields[1].Descriptor()
	// points.DefaultGrantedAt holds the default value on creation for the granted_at field.
	points.DefaultGrantedAt = pointsDescGrantedAt.Default.(func() time.Time)
	questionFields := schema.Question{}.Fields()
	_ = questionFields
	// questionDescCategory is the schema descriptor for category field.
	questionDescCategory := questionFields[0].Descriptor()
	// question.CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	question.CategoryValidator = questionDescCategory.Validators[0].(func(string) error)
	scopesetFields := schema.ScopeSet{}.Fields()
	_ = scopesetFields
	// scopesetDescSlug is the schema descriptor for slug field.
	scopesetDescSlug := scopesetFields[0].Descriptor()
	// scopeset.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	scopeset.SlugValidator = scopesetDescSlug.Validators[0].(func(string) error)
	// scopesetDescScopes is the schema descriptor for scopes field.
	scopesetDescScopes := scopesetFields[2].Descriptor()
	// scopeset.DefaultScopes holds the default value on creation for the scopes field.
	scopeset.DefaultScopes = scopesetDescScopes.Default.([]string)
	submissionFields := schema.Submission{}.Fields()
	_ = submissionFields
	// submissionDescSubmittedCode is the schema descriptor for submitted_code field.
	submissionDescSubmittedCode := submissionFields[0].Descriptor()
	// submission.SubmittedCodeValidator is a validator for the "submitted_code" field. It is called by the builders before save.
	submission.SubmittedCodeValidator = submissionDescSubmittedCode.Validators[0].(func(string) error)
	// submissionDescSubmittedAt is the schema descriptor for submitted_at field.
	submissionDescSubmittedAt := submissionFields[3].Descriptor()
	// submission.DefaultSubmittedAt holds the default value on creation for the submitted_at field.
	submission.DefaultSubmittedAt = submissionDescSubmittedAt.Default.(func() time.Time)
	userMixin := schema.User{}.Mixin()
	userMixinHooks0 := userMixin[0].Hooks()
	user.Hooks[0] = userMixinHooks0[0]
	userMixinInters0 := userMixin[0].Interceptors()
	user.Interceptors[0] = userMixinInters0[0]
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
}

const (
	Version = "v0.14.5"                                         // Version of ent codegen.
	Sum     = "h1:Rj2WOYJtCkWyFo6a+5wB3EfBRP0rnx1fMk6gGA0UUe4=" // Sum of ent codegen.
)
