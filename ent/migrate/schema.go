// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DatabasesColumns holds the columns for the "databases" table.
	DatabasesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "schema", Type: field.TypeString, Size: 2147483647},
		{Name: "relation_figure", Type: field.TypeString, Unique: true},
	}
	// DatabasesTable holds the schema information for the "databases" table.
	DatabasesTable = &schema.Table{
		Name:       "databases",
		Columns:    DatabasesColumns,
		PrimaryKey: []*schema.Column{DatabasesColumns[0]},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
	}
	// QuestionsColumns holds the columns for the "questions" table.
	QuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "category", Type: field.TypeString, Unique: true},
		{Name: "difficulty", Type: field.TypeEnum, Enums: []string{"unspecified", "easy", "medium", "hard"}, Default: "medium"},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "reference_answer", Type: field.TypeString, Size: 2147483647},
		{Name: "database_questions", Type: field.TypeInt},
	}
	// QuestionsTable holds the schema information for the "questions" table.
	QuestionsTable = &schema.Table{
		Name:       "questions",
		Columns:    QuestionsColumns,
		PrimaryKey: []*schema.Column{QuestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "questions_databases_questions",
				Columns:    []*schema.Column{QuestionsColumns[6]},
				RefColumns: []*schema.Column{DatabasesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ScopeSetsColumns holds the columns for the "scope_sets" table.
	ScopeSetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "scopes", Type: field.TypeJSON},
	}
	// ScopeSetsTable holds the schema information for the "scope_sets" table.
	ScopeSetsTable = &schema.Table{
		Name:       "scope_sets",
		Columns:    ScopeSetsColumns,
		PrimaryKey: []*schema.Column{ScopeSetsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "avatar", Type: field.TypeString, Nullable: true},
		{Name: "user_group", Type: field.TypeInt},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_groups_group",
				Columns:    []*schema.Column{UsersColumns[7]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// GroupScopeSetsColumns holds the columns for the "group_scope_sets" table.
	GroupScopeSetsColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeInt},
		{Name: "scope_set_id", Type: field.TypeInt},
	}
	// GroupScopeSetsTable holds the schema information for the "group_scope_sets" table.
	GroupScopeSetsTable = &schema.Table{
		Name:       "group_scope_sets",
		Columns:    GroupScopeSetsColumns,
		PrimaryKey: []*schema.Column{GroupScopeSetsColumns[0], GroupScopeSetsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_scope_sets_group_id",
				Columns:    []*schema.Column{GroupScopeSetsColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_scope_sets_scope_set_id",
				Columns:    []*schema.Column{GroupScopeSetsColumns[1]},
				RefColumns: []*schema.Column{ScopeSetsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DatabasesTable,
		GroupsTable,
		QuestionsTable,
		ScopeSetsTable,
		UsersTable,
		GroupScopeSetsTable,
	}
)

func init() {
	DatabasesTable.Annotation = &entsql.Annotation{
		IncrementStart: func(i int) *int { return &i }(12884901888),
	}
	GroupsTable.Annotation = &entsql.Annotation{
		IncrementStart: func(i int) *int { return &i }(4294967296),
	}
	QuestionsTable.ForeignKeys[0].RefTable = DatabasesTable
	QuestionsTable.Annotation = &entsql.Annotation{
		IncrementStart: func(i int) *int { return &i }(17179869184),
	}
	ScopeSetsTable.Annotation = &entsql.Annotation{
		IncrementStart: func(i int) *int { return &i }(8589934592),
	}
	UsersTable.ForeignKeys[0].RefTable = GroupsTable
	UsersTable.Annotation = &entsql.Annotation{
		IncrementStart: func(i int) *int { return &i }(0),
	}
	GroupScopeSetsTable.ForeignKeys[0].RefTable = GroupsTable
	GroupScopeSetsTable.ForeignKeys[1].RefTable = ScopeSetsTable
}
