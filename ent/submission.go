// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/database-playground/backend-v2/ent/question"
	"github.com/database-playground/backend-v2/ent/submission"
	"github.com/database-playground/backend-v2/ent/user"
	"github.com/database-playground/backend-v2/models"
)

// Submission is the model entity for the Submission schema.
type Submission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SubmittedCode holds the value of the "submitted_code" field.
	SubmittedCode string `json:"submitted_code,omitempty"`
	// Status holds the value of the "status" field.
	Status submission.Status `json:"status,omitempty"`
	// QueryResult holds the value of the "query_result" field.
	QueryResult *models.UserSQLExecutionResult `json:"query_result,omitempty"`
	// Error holds the value of the "error" field.
	Error *string `json:"error,omitempty"`
	// SubmittedAt holds the value of the "submitted_at" field.
	SubmittedAt time.Time `json:"submitted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubmissionQuery when eager-loading is set.
	Edges                SubmissionEdges `json:"edges"`
	question_submissions *int
	user_submissions     *int
	selectValues         sql.SelectValues
}

// SubmissionEdges holds the relations/edges for other nodes in the graph.
type SubmissionEdges struct {
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmissionEdges) QuestionOrErr() (*Question, error) {
	if e.Question != nil {
		return e.Question, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: question.Label}
	}
	return nil, &NotLoadedError{edge: "question"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmissionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Submission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case submission.FieldQueryResult:
			values[i] = new([]byte)
		case submission.FieldID:
			values[i] = new(sql.NullInt64)
		case submission.FieldSubmittedCode, submission.FieldStatus, submission.FieldError:
			values[i] = new(sql.NullString)
		case submission.FieldSubmittedAt:
			values[i] = new(sql.NullTime)
		case submission.ForeignKeys[0]: // question_submissions
			values[i] = new(sql.NullInt64)
		case submission.ForeignKeys[1]: // user_submissions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Submission fields.
func (_m *Submission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case submission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case submission.FieldSubmittedCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field submitted_code", values[i])
			} else if value.Valid {
				_m.SubmittedCode = value.String
			}
		case submission.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = submission.Status(value.String)
			}
		case submission.FieldQueryResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field query_result", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.QueryResult); err != nil {
					return fmt.Errorf("unmarshal field query_result: %w", err)
				}
			}
		case submission.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				_m.Error = new(string)
				*_m.Error = value.String
			}
		case submission.FieldSubmittedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field submitted_at", values[i])
			} else if value.Valid {
				_m.SubmittedAt = value.Time
			}
		case submission.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field question_submissions", value)
			} else if value.Valid {
				_m.question_submissions = new(int)
				*_m.question_submissions = int(value.Int64)
			}
		case submission.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_submissions", value)
			} else if value.Valid {
				_m.user_submissions = new(int)
				*_m.user_submissions = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Submission.
// This includes values selected through modifiers, order, etc.
func (_m *Submission) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryQuestion queries the "question" edge of the Submission entity.
func (_m *Submission) QueryQuestion() *QuestionQuery {
	return NewSubmissionClient(_m.config).QueryQuestion(_m)
}

// QueryUser queries the "user" edge of the Submission entity.
func (_m *Submission) QueryUser() *UserQuery {
	return NewSubmissionClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this Submission.
// Note that you need to call Submission.Unwrap() before calling this method if this Submission
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Submission) Update() *SubmissionUpdateOne {
	return NewSubmissionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Submission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Submission) Unwrap() *Submission {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Submission is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Submission) String() string {
	var builder strings.Builder
	builder.WriteString("Submission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("submitted_code=")
	builder.WriteString(_m.SubmittedCode)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("query_result=")
	builder.WriteString(fmt.Sprintf("%v", _m.QueryResult))
	builder.WriteString(", ")
	if v := _m.Error; v != nil {
		builder.WriteString("error=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("submitted_at=")
	builder.WriteString(_m.SubmittedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Submissions is a parsable slice of Submission.
type Submissions []*Submission
