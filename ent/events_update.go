// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/database-playground/backend-v2/ent/events"
	"github.com/database-playground/backend-v2/ent/predicate"
	"github.com/database-playground/backend-v2/ent/user"
)

// EventsUpdate is the builder for updating Events entities.
type EventsUpdate struct {
	config
	hooks    []Hook
	mutation *EventsMutation
}

// Where appends a list predicates to the EventsUpdate builder.
func (_u *EventsUpdate) Where(ps ...predicate.Events) *EventsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *EventsUpdate) SetUserID(v int) *EventsUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *EventsUpdate) SetNillableUserID(v *int) *EventsUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *EventsUpdate) SetType(v string) *EventsUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *EventsUpdate) SetNillableType(v *string) *EventsUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetTriggeredAt sets the "triggered_at" field.
func (_u *EventsUpdate) SetTriggeredAt(v time.Time) *EventsUpdate {
	_u.mutation.SetTriggeredAt(v)
	return _u
}

// SetNillableTriggeredAt sets the "triggered_at" field if the given value is not nil.
func (_u *EventsUpdate) SetNillableTriggeredAt(v *time.Time) *EventsUpdate {
	if v != nil {
		_u.SetTriggeredAt(*v)
	}
	return _u
}

// SetPayload sets the "payload" field.
func (_u *EventsUpdate) SetPayload(v map[string]interface{}) *EventsUpdate {
	_u.mutation.SetPayload(v)
	return _u
}

// ClearPayload clears the value of the "payload" field.
func (_u *EventsUpdate) ClearPayload() *EventsUpdate {
	_u.mutation.ClearPayload()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *EventsUpdate) SetUser(v *User) *EventsUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the EventsMutation object of the builder.
func (_u *EventsUpdate) Mutation() *EventsMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *EventsUpdate) ClearUser() *EventsUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EventsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EventsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EventsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EventsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EventsUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := events.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Events.type": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Events.user"`)
	}
	return nil
}

func (_u *EventsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(events.Table, events.Columns, sqlgraph.NewFieldSpec(events.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(events.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.TriggeredAt(); ok {
		_spec.SetField(events.FieldTriggeredAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Payload(); ok {
		_spec.SetField(events.FieldPayload, field.TypeJSON, value)
	}
	if _u.mutation.PayloadCleared() {
		_spec.ClearField(events.FieldPayload, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   events.UserTable,
			Columns: []string{events.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   events.UserTable,
			Columns: []string{events.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{events.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EventsUpdateOne is the builder for updating a single Events entity.
type EventsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventsMutation
}

// SetUserID sets the "user_id" field.
func (_u *EventsUpdateOne) SetUserID(v int) *EventsUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *EventsUpdateOne) SetNillableUserID(v *int) *EventsUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *EventsUpdateOne) SetType(v string) *EventsUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *EventsUpdateOne) SetNillableType(v *string) *EventsUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetTriggeredAt sets the "triggered_at" field.
func (_u *EventsUpdateOne) SetTriggeredAt(v time.Time) *EventsUpdateOne {
	_u.mutation.SetTriggeredAt(v)
	return _u
}

// SetNillableTriggeredAt sets the "triggered_at" field if the given value is not nil.
func (_u *EventsUpdateOne) SetNillableTriggeredAt(v *time.Time) *EventsUpdateOne {
	if v != nil {
		_u.SetTriggeredAt(*v)
	}
	return _u
}

// SetPayload sets the "payload" field.
func (_u *EventsUpdateOne) SetPayload(v map[string]interface{}) *EventsUpdateOne {
	_u.mutation.SetPayload(v)
	return _u
}

// ClearPayload clears the value of the "payload" field.
func (_u *EventsUpdateOne) ClearPayload() *EventsUpdateOne {
	_u.mutation.ClearPayload()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *EventsUpdateOne) SetUser(v *User) *EventsUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the EventsMutation object of the builder.
func (_u *EventsUpdateOne) Mutation() *EventsMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *EventsUpdateOne) ClearUser() *EventsUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the EventsUpdate builder.
func (_u *EventsUpdateOne) Where(ps ...predicate.Events) *EventsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EventsUpdateOne) Select(field string, fields ...string) *EventsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Events entity.
func (_u *EventsUpdateOne) Save(ctx context.Context) (*Events, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EventsUpdateOne) SaveX(ctx context.Context) *Events {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EventsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EventsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EventsUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := events.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Events.type": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Events.user"`)
	}
	return nil
}

func (_u *EventsUpdateOne) sqlSave(ctx context.Context) (_node *Events, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(events.Table, events.Columns, sqlgraph.NewFieldSpec(events.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Events.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, events.FieldID)
		for _, f := range fields {
			if !events.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != events.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(events.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.TriggeredAt(); ok {
		_spec.SetField(events.FieldTriggeredAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Payload(); ok {
		_spec.SetField(events.FieldPayload, field.TypeJSON, value)
	}
	if _u.mutation.PayloadCleared() {
		_spec.ClearField(events.FieldPayload, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   events.UserTable,
			Columns: []string{events.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   events.UserTable,
			Columns: []string{events.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Events{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{events.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
