directive @scope(scope: String!) on FIELD_DEFINITION

extend type Query {
  me: User! @scope(scope: "user:read")
}

extend type User {
  impersonatedBy: User @scope(scope: "user:impersonate")
}

type Mutation {
  createUser(input: CreateUserInput!): User @scope(scope: "user:write")
  updateUser(id: ID!, input: UpdateUserInput!): User @scope(scope: "user:write")
  deleteUser(id: ID!): Boolean! @scope(scope: "user:write")

  createScopeSet(input: CreateScopeSetInput!): ScopeSet @scope(scope: "scopeset:write")
  updateScopeSet(id: ID!, input: UpdateScopeSetInput!): ScopeSet @scope(scope: "scopeset:write")
  deleteScopeSet(id: ID!): Boolean! @scope(scope: "scopeset:write")

  createGroup(input: CreateGroupInput!): Group @scope(scope: "group:write")
  updateGroup(id: ID!, input: UpdateGroupInput!): Group @scope(scope: "group:write")
  deleteGroup(id: ID!): Boolean! @scope(scope: "group:write")

  # FIXME: IT MUST BE DELETED IN PRODUCTION!!
  createAdmin(input: CreateUserInput!): User

  """
  Impersonate a user.

  Returns the token of the impersonated user.
  You can then use the token to access the user's resources.
  """
  impersonateUser(userID: ID!): String! @scope(scope: "user:impersonate")

  """
  Logout from all the devices of the current user.
  """
  logoutAll: Boolean! @scope(scope: "user:write")
}
