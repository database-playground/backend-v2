package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"errors"
	"strconv"

	"github.com/database-playground/backend-v2/ent"
	"github.com/database-playground/backend-v2/graph/defs"
	"github.com/database-playground/backend-v2/internal/auth"
	"github.com/database-playground/backend-v2/internal/httputils"
	"github.com/database-playground/backend-v2/internal/useraccount"
)

// ImpersonateUser is the resolver for the impersonateUser field.
func (r *mutationResolver) ImpersonateUser(ctx context.Context, userID int) (string, error) {
	// Get the user to impersonate.
	user, err := r.UserAccount().GetUser(ctx, userID)
	if err != nil {
		if errors.Is(err, useraccount.ErrUserNotFound) {
			return "", defs.ErrNotFound
		}

		return "", err
	}

	machineName := httputils.GetMachineName(ctx)

	token, err := r.UserAccount().GrantToken(
		ctx, user, machineName,
		useraccount.WithFlow("impersonation"),
		useraccount.WithImpersonation(userID),
	)
	if err != nil {
		return "", err
	}

	return token, nil
}

// LogoutAll is the resolver for the logoutAll field.
func (r *mutationResolver) LogoutAll(ctx context.Context) (bool, error) {
	user, ok := auth.GetUser(ctx)
	if !ok {
		// this should never happen since we have set proper scope
		return false, defs.ErrUnauthorized
	}

	err := r.UserAccount().RevokeAllTokens(ctx, user.UserID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteMe is the resolver for the deleteMe field.
func (r *mutationResolver) DeleteMe(ctx context.Context) (bool, error) {
	user, ok := auth.GetUser(ctx)
	if !ok {
		// this should never happen since we have set proper scope
		return false, defs.ErrUnauthorized
	}

	err := r.UserAccount().DeleteUser(ctx, user.UserID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// VerifyRegistration is the resolver for the verifyRegistration field.
func (r *mutationResolver) VerifyRegistration(ctx context.Context) (bool, error) {
	tokenInfo, ok := auth.GetUser(ctx)
	if !ok {
		// this should never happen since we have set proper scope
		return false, defs.ErrUnauthorized
	}

	err := r.UserAccount().Verify(ctx, tokenInfo.UserID)
	if err != nil {
		if errors.Is(err, useraccount.ErrUserVerified) {
			return false, defs.ErrVerified
		}

		return false, err
	}

	return true, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	tokenInfo, ok := auth.GetUser(ctx)
	if !ok {
		// this should never happen since we have set proper scope
		return nil, defs.ErrUnauthorized
	}

	user, err := r.UserAccount().GetUser(ctx, tokenInfo.UserID)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// ImpersonatedBy is the resolver for the impersonatedBy field.
func (r *userResolver) ImpersonatedBy(ctx context.Context, obj *ent.User) (*ent.User, error) {
	tokenInfo, ok := auth.GetUser(ctx)
	if !ok {
		// this should never happen since we have set proper scope
		return nil, defs.ErrUnauthorized
	}

	impersonatedBy, err := strconv.Atoi(tokenInfo.Meta[useraccount.MetaImpersonation])
	if err != nil {
		return nil, nil
	}

	return r.UserAccount().GetUser(ctx, impersonatedBy)
}
