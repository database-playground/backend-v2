package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.79

import (
	"context"
	"errors"
	"strconv"

	"github.com/database-playground/backend-v2/ent"
	"github.com/database-playground/backend-v2/ent/group"
	"github.com/database-playground/backend-v2/ent/predicate"
	"github.com/database-playground/backend-v2/ent/scopeset"
	"github.com/database-playground/backend-v2/ent/user"
	"github.com/database-playground/backend-v2/graph/defs"
	"github.com/database-playground/backend-v2/graph/model"
	"github.com/database-playground/backend-v2/internal/auth"
	"github.com/database-playground/backend-v2/internal/httputils"
	"github.com/database-playground/backend-v2/internal/useraccount"
)

// UpdateMe is the resolver for the updateMe field.
func (r *mutationResolver) UpdateMe(ctx context.Context, input ent.UpdateUserInput) (*ent.User, error) {
	user, ok := auth.GetUser(ctx)
	if !ok {
		// this should never happen since we have set proper scope
		return nil, defs.ErrUnauthorized
	}

	// users cannot update their group
	if input.GroupID != nil {
		return nil, defs.ErrDisallowUpdateGroup
	}

	entClient := r.EntClient(ctx)

	updatedUser, err := entClient.User.UpdateOneID(user.UserID).SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return updatedUser, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input ent.UpdateUserInput) (*ent.User, error) {
	entClient := r.EntClient(ctx)

	user, err := entClient.User.UpdateOneID(id).SetInput(input).Save(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, defs.ErrNotFound
		}
		return nil, err
	}

	return user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (bool, error) {
	entClient := r.EntClient(ctx)

	err := entClient.User.DeleteOneID(id).Exec(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return false, defs.ErrNotFound
		}
		return false, err
	}

	return true, nil
}

// CreateScopeSet is the resolver for the createScopeSet field.
func (r *mutationResolver) CreateScopeSet(ctx context.Context, input ent.CreateScopeSetInput) (*ent.ScopeSet, error) {
	entClient := r.EntClient(ctx)

	scopeSet, err := entClient.ScopeSet.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return scopeSet, nil
}

// UpdateScopeSet is the resolver for the updateScopeSet field.
func (r *mutationResolver) UpdateScopeSet(ctx context.Context, id int, input ent.UpdateScopeSetInput) (*ent.ScopeSet, error) {
	entClient := r.EntClient(ctx)

	scopeSet, err := entClient.ScopeSet.UpdateOneID(id).SetInput(input).Save(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, defs.ErrNotFound
		}
		return nil, err
	}

	return scopeSet, nil
}

// DeleteScopeSet is the resolver for the deleteScopeSet field.
func (r *mutationResolver) DeleteScopeSet(ctx context.Context, id int) (bool, error) {
	entClient := r.EntClient(ctx)

	err := entClient.ScopeSet.DeleteOneID(id).Exec(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return false, defs.ErrNotFound
		}
		return false, err
	}

	return true, nil
}

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, input ent.CreateGroupInput) (*ent.Group, error) {
	entClient := r.EntClient(ctx)

	group, err := entClient.Group.Create().SetInput(input).Save(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, defs.ErrNotFound
		}
		return nil, err
	}

	return group, nil
}

// UpdateGroup is the resolver for the updateGroup field.
func (r *mutationResolver) UpdateGroup(ctx context.Context, id int, input ent.UpdateGroupInput) (*ent.Group, error) {
	entClient := r.EntClient(ctx)

	group, err := entClient.Group.UpdateOneID(id).SetInput(input).Save(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, defs.ErrNotFound
		}
		return nil, err
	}

	return group, nil
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id int) (bool, error) {
	entClient := r.EntClient(ctx)

	err := entClient.Group.DeleteOneID(id).Exec(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return false, defs.ErrNotFound
		}
		return false, err
	}

	return true, nil
}

// ImpersonateUser is the resolver for the impersonateUser field.
func (r *mutationResolver) ImpersonateUser(ctx context.Context, userID int) (string, error) {
	// Get the user to impersonate.
	user, err := r.useraccount.GetUser(ctx, userID)
	if err != nil {
		if errors.Is(err, useraccount.ErrUserNotFound) {
			return "", defs.ErrNotFound
		}

		return "", err
	}

	machineName := httputils.GetMachineName(ctx)

	token, err := r.useraccount.GrantToken(
		ctx, user, machineName,
		useraccount.WithFlow("impersonation"),
		useraccount.WithImpersonation(userID),
	)
	if err != nil {
		return "", err
	}

	return token, nil
}

// LogoutUser is the resolver for the logoutUser field.
func (r *mutationResolver) LogoutUser(ctx context.Context, userID int) (bool, error) {
	err := r.useraccount.RevokeAllTokens(ctx, userID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// LogoutAll is the resolver for the logoutAll field.
func (r *mutationResolver) LogoutAll(ctx context.Context) (bool, error) {
	user, ok := auth.GetUser(ctx)
	if !ok {
		// this should never happen since we have set proper scope
		return false, defs.ErrUnauthorized
	}

	return r.LogoutUser(ctx, user.UserID)
}

// VerifyRegistration is the resolver for the verifyRegistration field.
func (r *mutationResolver) VerifyRegistration(ctx context.Context) (bool, error) {
	tokenInfo, ok := auth.GetUser(ctx)
	if !ok {
		// this should never happen since we have set proper scope
		return false, defs.ErrUnauthorized
	}

	err := r.useraccount.Verify(ctx, tokenInfo.UserID)
	if err != nil {
		if errors.Is(err, useraccount.ErrUserVerified) {
			return false, defs.ErrVerified
		}

		return false, err
	}

	return true, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	tokenInfo, ok := auth.GetUser(ctx)
	if !ok {
		// this should never happen since we have set proper scope
		return nil, defs.ErrUnauthorized
	}

	user, err := r.useraccount.GetUser(ctx, tokenInfo.UserID)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int) (*ent.User, error) {
	entClient := r.EntClient(ctx)

	user, err := entClient.User.Query().Where(user.ID(id)).First(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, defs.ErrNotFound
		}
		return nil, err
	}

	return user, nil
}

// Group is the resolver for the group field.
func (r *queryResolver) Group(ctx context.Context, id int) (*ent.Group, error) {
	entClient := r.EntClient(ctx)

	group, err := entClient.Group.Query().Where(group.ID(id)).First(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, defs.ErrNotFound
		}
		return nil, err
	}

	return group, nil
}

// ScopeSet is the resolver for the scopeSet field.
func (r *queryResolver) ScopeSet(ctx context.Context, filter model.ScopeSetFilter) (*ent.ScopeSet, error) {
	var ps predicate.ScopeSet

	if filter.ID != nil {
		ps = scopeset.ID(*filter.ID)
	}

	if filter.Slug != nil {
		if ps != nil {
			return nil, defs.ErrInvalidFilter
		}

		ps = scopeset.Slug(*filter.Slug)
	}

	if ps == nil {
		return nil, defs.ErrInvalidFilter
	}

	entClient := r.EntClient(ctx)

	scopeSet, err := entClient.ScopeSet.Query().Where(ps).First(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, defs.ErrNotFound
		}
		return nil, err
	}

	return scopeSet, nil
}

// ImpersonatedBy is the resolver for the impersonatedBy field.
func (r *userResolver) ImpersonatedBy(ctx context.Context, obj *ent.User) (*ent.User, error) {
	tokenInfo, ok := auth.GetUser(ctx)
	if !ok {
		// this should never happen since we have set proper scope
		return nil, defs.ErrUnauthorized
	}

	impersonatedBy, err := strconv.Atoi(tokenInfo.Meta[useraccount.MetaImpersonation])
	if err != nil {
		return nil, nil
	}

	return r.useraccount.GetUser(ctx, impersonatedBy)
}
