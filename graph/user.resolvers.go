package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"strconv"

	"github.com/database-playground/backend-v2/ent"
	"github.com/database-playground/backend-v2/ent/user"
	"github.com/database-playground/backend-v2/graph/defs"
	"github.com/database-playground/backend-v2/internal/auth"
)

// ImpersonateUser is the resolver for the impersonateUser field.
func (r *mutationResolver) ImpersonateUser(ctx context.Context, userID int) (string, error) {
	// Get the user information.
	user, err := r.ent.User.Query().Where(user.ID(userID)).Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return "", defs.ErrNotFound
		}

		return "", err
	}

	token, err := r.auth.Create(ctx, auth.TokenInfo{
		UserID:    user.ID,
		UserEmail: user.Email,
		Scopes:    []string{"*"},
		Meta: map[string]string{
			"impersonated_by": strconv.Itoa(userID),
		},
	})
	if err != nil {
		return "", err
	}

	return token, nil
}

// LogoutAll is the resolver for the logoutAll field.
func (r *mutationResolver) LogoutAll(ctx context.Context) (bool, error) {
	user, ok := auth.GetUser(ctx)
	if !ok {
		// this should never happen since we have set proper scope
		return false, defs.ErrUnauthorized
	}

	err := r.auth.DeleteByUser(ctx, user.UserID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteMe is the resolver for the deleteMe field.
func (r *mutationResolver) DeleteMe(ctx context.Context) (bool, error) {
	user, ok := auth.GetUser(ctx)
	if !ok {
		return false, defs.ErrUnauthorized
	}

	err := r.ent.User.DeleteOneID(user.UserID).Exec(ctx)
	if err != nil {
		return false, err
	}

	return true, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	tokenInfo, ok := auth.GetUser(ctx)
	if !ok {
		return nil, defs.ErrUnauthorized
	}

	return r.ent.User.Query().Where(user.ID(tokenInfo.UserID)).Only(ctx)
}

// ImpersonatedBy is the resolver for the impersonatedBy field.
func (r *userResolver) ImpersonatedBy(ctx context.Context, obj *ent.User) (*ent.User, error) {
	tokenInfo, ok := auth.GetUser(ctx)
	if !ok {
		return nil, defs.ErrUnauthorized
	}

	if tokenInfo.Meta["impersonated_by"] == "" {
		return nil, nil
	}

	impersonatedBy, err := strconv.Atoi(tokenInfo.Meta["impersonated_by"])
	if err != nil {
		return nil, err
	}

	user, err := r.ent.User.Query().Where(user.ID(impersonatedBy)).Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, nil
		}
		return nil, err
	}

	return user, nil
}
