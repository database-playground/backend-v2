package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"

	"github.com/database-playground/backend-v2/ent"
	"github.com/database-playground/backend-v2/graph/model"
)

// CreateQuestion is the resolver for the createQuestion field.
func (r *mutationResolver) CreateQuestion(ctx context.Context, input ent.CreateQuestionInput) (*ent.Question, error) {
	entClient := r.EntClient(ctx)

	question, err := entClient.Question.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return question, nil
}

// UpdateQuestion is the resolver for the updateQuestion field.
func (r *mutationResolver) UpdateQuestion(ctx context.Context, id int, input ent.UpdateQuestionInput) (*ent.Question, error) {
	entClient := r.EntClient(ctx)

	question, err := entClient.Question.UpdateOneID(id).SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return question, nil
}

// DeleteQuestion is the resolver for the deleteQuestion field.
func (r *mutationResolver) DeleteQuestion(ctx context.Context, id int) (bool, error) {
	entClient := r.EntClient(ctx)

	err := entClient.Question.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateDatabase is the resolver for the createDatabase field.
func (r *mutationResolver) CreateDatabase(ctx context.Context, input ent.CreateDatabaseInput) (*ent.Database, error) {
	entClient := r.EntClient(ctx)

	database, err := entClient.Database.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return database, nil
}

// UpdateDatabase is the resolver for the updateDatabase field.
func (r *mutationResolver) UpdateDatabase(ctx context.Context, id int, input ent.UpdateDatabaseInput) (*ent.Database, error) {
	entClient := r.EntClient(ctx)

	database, err := entClient.Database.UpdateOneID(id).SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return database, nil
}

// DeleteDatabase is the resolver for the deleteDatabase field.
func (r *mutationResolver) DeleteDatabase(ctx context.Context, id int) (bool, error) {
	entClient := r.EntClient(ctx)

	err := entClient.Database.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, err
	}

	return true, nil
}

// Question is the resolver for the question field.
func (r *queryResolver) Question(ctx context.Context, id int) (*ent.Question, error) {
	entClient := r.EntClient(ctx)

	question, err := entClient.Question.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	return question, nil
}

// Database is the resolver for the database field.
func (r *queryResolver) Database(ctx context.Context, id int) (*ent.Database, error) {
	entClient := r.EntClient(ctx)

	database, err := entClient.Database.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	return database, nil
}

// ReferenceAnswerResult is the resolver for the referenceAnswerResult field.
func (r *questionResolver) ReferenceAnswerResult(ctx context.Context, obj *ent.Question) (*model.SQLResponse, error) {
	database, err := obj.QueryDatabase().Only(ctx)
	if err != nil {
		return nil, err
	}

	response, err := r.sqlrunner.Query(ctx, database.Schema, obj.ReferenceAnswer)
	if err != nil {
		return nil, err
	}

	return &model.SQLResponse{
		Columns: response.Columns,
		Rows:    response.Rows,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
