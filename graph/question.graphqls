extend type Query {
  """
  Get a question by ID.
  """
  question(id: ID!): Question! @scope(scope: "question:read")

  """
  Get a database by ID.
  """
  database(id: ID!): Database! @scope(scope: "database:read")

  """
  Get a submission by ID.

  If you have the "submission:read" scope, you can get any submission by ID;
  otherwise, you can only get your own submissions.
  """
  submission(id: ID!): Submission!
}

extend type Mutation {
  """
  Create a question.
  """
  createQuestion(input: CreateQuestionInput!): Question!
    @scope(scope: "question:write")

  """
  Update a question.
  """
  updateQuestion(id: ID!, input: UpdateQuestionInput!): Question!
    @scope(scope: "question:write")

  """
  Delete a question.
  """
  deleteQuestion(id: ID!): Boolean! @scope(scope: "question:write")

  """
  Create a database.
  """
  createDatabase(input: CreateDatabaseInput!): Database!
    @scope(scope: "database:write")

  """
  Update a database.
  """
  updateDatabase(id: ID!, input: UpdateDatabaseInput!): Database!
    @scope(scope: "database:write")

  """
  Delete a database.
  """
  deleteDatabase(id: ID!): Boolean! @scope(scope: "database:write")

  """
  Submit your answer to a question.
  """
  submitAnswer(id: ID!, answer: String!): SubmissionResult!
    @scope(scope: "submission:write")
}

extend type Question {
  referenceAnswerResult: SQLExecutionResult! @scope(scope: "question:read")
}

extend type User {
  """
  Get all submissions of a question.
  """
  submissionsOfQuestion(
    """
    The question ID.
    """
    questionID: ID!,
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The where input to filter the submissions.
    """
    where: SubmissionsOfQuestionWhereInput

    """
    The order by input to order the submissions.
    """
    orderBy: SubmissionOrder
  ): SubmissionConnection!
}

input SubmissionsOfQuestionWhereInput {
  status: SubmissionStatus
}

type SQLExecutionResult {
  columns: [String!]!
  rows: [[String!]!]!
}

type UserSQLExecutionResult {
  columns: [String!]!
  rows: [[String!]!]!
  matchAnswer: Boolean!
}

type SubmissionResult {
  result: UserSQLExecutionResult
  error: String
}
