extend type Query {
  """
  Get a question by ID.
  """
  question(id: ID!): Question! @scope(scope: "question:read")

  """
  Get a database by ID.
  """
  database(id: ID!): Database! @scope(scope: "database:read")

  """
  Get a submission by ID.

  If you have the "submission:read" scope, you can get any submission by ID;
  otherwise, you can only get your own submissions.
  """
  submission(id: ID!): Submission!

  """
  Get the list of question categories.
  """
  questionCategories: [String!]! @scope(scope: "question:read")
}

extend type Mutation {
  """
  Create a question.
  """
  createQuestion(input: CreateQuestionInput!): Question!
    @scope(scope: "question:write")

  """
  Update a question.
  """
  updateQuestion(id: ID!, input: UpdateQuestionInput!): Question!
    @scope(scope: "question:write")

  """
  Delete a question.
  """
  deleteQuestion(id: ID!): Boolean! @scope(scope: "question:write")

  """
  Create a database.
  """
  createDatabase(input: CreateDatabaseInput!): Database!
    @scope(scope: "database:write")

  """
  Update a database.
  """
  updateDatabase(id: ID!, input: UpdateDatabaseInput!): Database!
    @scope(scope: "database:write")

  """
  Delete a database.
  """
  deleteDatabase(id: ID!): Boolean! @scope(scope: "database:write")

  """
  Submit your answer to a question.
  """
  submitAnswer(id: ID!, answer: String!): SubmissionResult!
    @scope(scope: "submission:write")
}

extend type Question {
  referenceAnswerResult: SQLExecutionResult!

  """
  List of your submissions for this question, ordered by submitted at descending.
  """
  userSubmissions: [Submission!]!

  """
  Get the last submission for this question.
  """
  lastSubmission: Submission

  """
  Have you tried to solve the question?
  """
  attempted: Boolean!

  """
  Have you solved the question?
  """
  solved: Boolean!

  """
  The statistics of the question, e.g. pass rate.
  """
  statistics: QuestionStatistics!
}

extend type User {
  submissionStatistics: SubmissionStatistics!
}

type SubmissionStatistics {
  totalQuestions: Int!
  attemptedQuestions: Int!
  solvedQuestions: Int!

  solvedQuestionByDifficulty: [SolvedQuestionByDifficulty!]!
}

type QuestionStatistics {
  """
  Number of correct submissions
  """
  correctSubmissionCount: Int!

  """
  Total number of submissions
  """
  submissionCount: Int!

  """
  Number of users who attempted
  """
  attemptedUsers: Int!

  """
  Number of users who passed
  """
  passedUsers: Int!
}

type SolvedQuestionByDifficulty {
  difficulty: QuestionDifficulty!
  solvedQuestions: Int!
}

type SQLExecutionResult {
  columns: [String!]!
  rows: [[String!]!]!
}

type UserSQLExecutionResult {
  columns: [String!]!
  rows: [[String!]!]!
  matchAnswer: Boolean!
}

type SubmissionResult {
  result: UserSQLExecutionResult
  error: String
}
