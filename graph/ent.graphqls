directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateDatabaseInput is used for create Database object.
Input was generated by ent.
"""
input CreateDatabaseInput {
  slug: String!
  """
  relation figure
  """
  relationFigure: String!
  description: String
  """
  SQL schema
  """
  schema: String!
}
"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
  name: String!
  description: String
  scopeSetIDs: [ID!]
}
"""
CreateQuestionInput is used for create Question object.
Input was generated by ent.
"""
input CreateQuestionInput {
  """
  Question category, e.g. 'query'
  """
  category: String!
  """
  Question difficulty, e.g. 'easy'
  """
  difficulty: QuestionDifficulty
  """
  Question title
  """
  title: String!
  """
  Question stem
  """
  description: String!
  """
  Reference answer
  """
  referenceAnswer: String!
  databaseIDs: [ID!]
}
"""
CreateScopeSetInput is used for create ScopeSet object.
Input was generated by ent.
"""
input CreateScopeSetInput {
  slug: String!
  description: String
  scopes: [String!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String!
  email: String!
  avatar: String
  groupID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Database implements Node {
  id: ID!
  slug: String!
  """
  relation figure
  """
  relationFigure: String!
  description: String
  """
  SQL schema
  """
  schema: String!
}
"""
DatabaseWhereInput is used for filtering Database objects.
Input was generated by ent.
"""
input DatabaseWhereInput {
  not: DatabaseWhereInput
  and: [DatabaseWhereInput!]
  or: [DatabaseWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugEqualFold: String
  slugContainsFold: String
  """
  relation_figure field predicates
  """
  relationFigure: String
  relationFigureNEQ: String
  relationFigureIn: [String!]
  relationFigureNotIn: [String!]
  relationFigureGT: String
  relationFigureGTE: String
  relationFigureLT: String
  relationFigureLTE: String
  relationFigureContains: String
  relationFigureHasPrefix: String
  relationFigureHasSuffix: String
  relationFigureEqualFold: String
  relationFigureContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  schema field predicates
  """
  schema: String
  schemaNEQ: String
  schemaIn: [String!]
  schemaNotIn: [String!]
  schemaGT: String
  schemaGTE: String
  schemaLT: String
  schemaLTE: String
  schemaContains: String
  schemaHasPrefix: String
  schemaHasSuffix: String
  schemaEqualFold: String
  schemaContainsFold: String
}
type Group implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  description: String
  scopeSet: [ScopeSet!]
}
"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
  not: GroupWhereInput
  and: [GroupWhereInput!]
  or: [GroupWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  scope_set edge predicates
  """
  hasScopeSet: Boolean
  hasScopeSetWith: [ScopeSetWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/database-playground/backend-v2/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  databases: [Database!]! @scope(scope: "database:read")
  groups: [Group!]! @scope(scope: "group:read")
  questions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Questions returned from the connection.
    """
    orderBy: QuestionOrder

    """
    Filtering options for Questions returned from the connection.
    """
    where: QuestionWhereInput
  ): QuestionConnection! @scope(scope: "question:read")
  scopeSets: [ScopeSet!]! @scope(scope: "scopeset:read")
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection! @scope(scope: "user:read")
}
type Question implements Node {
  id: ID!
  """
  Question category, e.g. 'query'
  """
  category: String!
  """
  Question difficulty, e.g. 'easy'
  """
  difficulty: QuestionDifficulty!
  """
  Question title
  """
  title: String!
  """
  Question stem
  """
  description: String!
  """
  Reference answer
  """
  referenceAnswer: String! @scope(scope: "answer:read")
  database: [Database!]
}
"""
A connection to a list of items.
"""
type QuestionConnection {
  """
  A list of edges.
  """
  edges: [QuestionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
QuestionDifficulty is enum for the field difficulty
"""
enum QuestionDifficulty @goModel(model: "github.com/database-playground/backend-v2/ent/question.Difficulty") {
  unspecified
  easy
  medium
  hard
}
"""
An edge in a connection.
"""
type QuestionEdge {
  """
  The item at the end of the edge.
  """
  node: Question
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Question connections
"""
input QuestionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Questions.
  """
  field: QuestionOrderField!
}
"""
Properties by which Question connections can be ordered.
"""
enum QuestionOrderField {
  CATEGORY
  DIFFICULTY
}
"""
QuestionWhereInput is used for filtering Question objects.
Input was generated by ent.
"""
input QuestionWhereInput {
  not: QuestionWhereInput
  and: [QuestionWhereInput!]
  or: [QuestionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  category field predicates
  """
  category: String
  categoryNEQ: String
  categoryIn: [String!]
  categoryNotIn: [String!]
  categoryGT: String
  categoryGTE: String
  categoryLT: String
  categoryLTE: String
  categoryContains: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryEqualFold: String
  categoryContainsFold: String
  """
  difficulty field predicates
  """
  difficulty: QuestionDifficulty
  difficultyNEQ: QuestionDifficulty
  difficultyIn: [QuestionDifficulty!]
  difficultyNotIn: [QuestionDifficulty!]
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  reference_answer field predicates
  """
  referenceAnswer: String
  referenceAnswerNEQ: String
  referenceAnswerIn: [String!]
  referenceAnswerNotIn: [String!]
  referenceAnswerGT: String
  referenceAnswerGTE: String
  referenceAnswerLT: String
  referenceAnswerLTE: String
  referenceAnswerContains: String
  referenceAnswerHasPrefix: String
  referenceAnswerHasSuffix: String
  referenceAnswerEqualFold: String
  referenceAnswerContainsFold: String
  """
  database edge predicates
  """
  hasDatabase: Boolean
  hasDatabaseWith: [DatabaseWhereInput!]
}
type ScopeSet implements Node {
  id: ID!
  slug: String!
  description: String
  scopes: [String!]!
}
"""
ScopeSetWhereInput is used for filtering ScopeSet objects.
Input was generated by ent.
"""
input ScopeSetWhereInput {
  not: ScopeSetWhereInput
  and: [ScopeSetWhereInput!]
  or: [ScopeSetWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugEqualFold: String
  slugContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateDatabaseInput is used for update Database object.
Input was generated by ent.
"""
input UpdateDatabaseInput {
  description: String
  clearDescription: Boolean
  """
  SQL schema
  """
  schema: String
}
"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
  name: String
  description: String
  clearDescription: Boolean
  addScopeSetIDs: [ID!]
  removeScopeSetIDs: [ID!]
  clearScopeSet: Boolean
}
"""
UpdateQuestionInput is used for update Question object.
Input was generated by ent.
"""
input UpdateQuestionInput {
  """
  Question difficulty, e.g. 'easy'
  """
  difficulty: QuestionDifficulty
  """
  Question title
  """
  title: String
  """
  Question stem
  """
  description: String
  """
  Reference answer
  """
  referenceAnswer: String
  addDatabaseIDs: [ID!]
  removeDatabaseIDs: [ID!]
  clearDatabase: Boolean
}
"""
UpdateScopeSetInput is used for update ScopeSet object.
Input was generated by ent.
"""
input UpdateScopeSetInput {
  description: String
  clearDescription: Boolean
  scopes: [String!]
  appendScopes: [String!]
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  avatar: String
  clearAvatar: Boolean
  groupID: ID
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  email: String!
  avatar: String
  group: Group!
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  EMAIL
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  avatar field predicates
  """
  avatar: String
  avatarNEQ: String
  avatarIn: [String!]
  avatarNotIn: [String!]
  avatarGT: String
  avatarGTE: String
  avatarLT: String
  avatarLTE: String
  avatarContains: String
  avatarHasPrefix: String
  avatarHasSuffix: String
  avatarIsNil: Boolean
  avatarNotNil: Boolean
  avatarEqualFold: String
  avatarContainsFold: String
  """
  group edge predicates
  """
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
}
